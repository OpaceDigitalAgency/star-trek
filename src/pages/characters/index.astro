---
import Layout from '../../layouts/Layout.astro';
import { stapiService, getStaticImage } from '../../services/stapiService';

// Pagination settings
const PAGE_SIZE = 48; // Number of characters to display per page
let initialCharacters = [];
let totalPages = 1;
let totalCharacters = 0;
let allSpecies = []; // For filter dropdown

// Fetch only the first page of characters for the initial build
try {
  const initialData = await stapiService.getCharacters(0, PAGE_SIZE);
  initialCharacters = initialData.characters || [];
  totalPages = initialData.page?.totalPages || 1;
  totalCharacters = initialData.page?.totalElements || initialCharacters.length;

  // Fetch all species for the filter dropdown (consider caching this later)
  // This might still be slow if there are thousands of species
  const speciesData = await stapiService.searchSpecies({ pageSize: 2000 }); // Adjust pageSize as needed
  allSpecies = speciesData.map(s => s.name).sort((a, b) => {
    if (a === 'Human') return -1;
    if (b === 'Human') return 1;
    if (a === 'Unknown') return -1; // Assuming 'Unknown' might exist
    if (b === 'Unknown') return 1;
    return a.localeCompare(b);
  });

  console.log(`Initial build: Fetched ${initialCharacters.length} characters. Total characters: ${totalCharacters}, Total pages: ${totalPages}. Found ${allSpecies.length} species.`);

} catch (error) {
  console.error('Error fetching initial character/species data:', error);
  // Add fallback data if needed
  initialCharacters = [ /* Add fallback character objects here if API fails */ ];
  allSpecies = ['Human', 'Vulcan', 'Klingon']; // Basic fallback species
  totalCharacters = initialCharacters.length;
  totalPages = 1;
}

// Extract ranks *only* from the initial page for the build
let initialRanks = [...new Set(initialCharacters
  .map(c => c.title?.trim())
  .filter(Boolean) // Remove empty/null titles
)].sort();


// --- REMOVED Memory Alpha image fetching and complex species grouping from build ---


// Create JSON-LD schema for characters page (using initial data)
const charactersSchema = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "Star Trek Characters | Complete Guide to Characters in the Star Trek Universe",
  "description": "Explore the diverse characters of Star Trek from all series and movies. Learn about captains, officers, aliens, and more from across the Federation and beyond.",
  "url": "https://star-trek-timelines.netlify.app/characters/",
  "isPartOf": {
    "@type": "WebSite",
    "name": "Star Trek Timelines",
    "url": "https://star-trek-timelines.netlify.app/"
  },
  "about": {
    "@type": "CreativeWorkSeries",
    "name": "Star Trek",
    "description": "Science fiction media franchise created by Gene Roddenberry"
  },
  // Update hasPart to use initialCharacters
  "hasPart": initialCharacters.slice(0, 10).map(char => ({ // Limit to first 10 for schema
      "@type": "Person",
      "name": char.name,
      // Ensure slug/uid exists for URL generation
      "url": `https://star-trek-timelines.netlify.app/characters/${char.uid}/`,
      "jobTitle": char.title || "Officer",
      // Try to get species name if available in character object
      "description": `${char.characterSpecies?.[0]?.name || char.species?.[0]?.name || 'Unknown'} character from Star Trek`
  }))
};
---

<Layout
  title="Star Trek Characters | Complete Guide to Characters in the Star Trek Universe"
  description="Explore the diverse characters of Star Trek from all series and movies. Learn about captains, officers, aliens, and more from across the Federation and beyond."
  schemaData={charactersSchema}
>
  
  <div class="container mx-auto px-4 py-12">
    <div class="lcars-header mb-8">
      <div class="lcars-header-content">
        <h1 class="text-3xl">Federation Personnel Database</h1>
      </div>
    </div>
    
    <div class="lcars-panel mb-12">
      <div class="lcars-top-bar flex">
        <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
        <div class="flex-1 h-8 bg-starfleet-blue"></div>
        <div class="w-16 h-8 bg-starfleet-red"></div>
      </div>
      
      <div class="panel-content p-6">
        <p class="text-gray-300 mb-6">
          Accessing Federation personnel records... This database contains information on notable individuals
          from across the Star Trek universe, organized by species and rank. Explore the profiles of Starfleet officers,
          diplomats, scientists, and others who have shaped the history of the galaxy.
        </p>
        
        <div class="filters mb-8">
          <div class="flex flex-wrap gap-4">
            <div class="filter-group">
              <h3 class="text-white text-lg mb-2">Filter by Species</h3>
              <select
                id="species-filter"
                class="appearance-none bg-space-black text-white p-2 pr-8 border border-starfleet-blue rounded relative"
              >
                <option value="all">All Species</option>
                {allSpecies.map(species => (
                                  <option value={species}>{species}</option>
                                ))}
              </select>
              <!-- chevron -->
              <svg class="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 fill-starfleet-gold"
                   viewBox="0 0 20 20"><path d="M5 7l5 5 5-5H5z"/></svg>
            </div>
            
            {initialRanks.length > 0 && (
                          <div class="filter-group">
                            <h3 class="text-white text-lg mb-2">Filter by Rank</h3>
                            <select
                              id="rank-filter"
                              class="appearance-none bg-space-black text-white p-2 pr-8 border border-starfleet-blue rounded relative"
                            >
                              <option value="all">All Ranks</option>
                              {/* Populate ranks dynamically client-side later */}
                              {initialRanks.map(rank => (
                                <option value={rank}>{rank}</option>
                              ))}
                            </select>
                            <!-- chevron -->
                            <svg class="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 fill-starfleet-gold"
                                 viewBox="0 0 20 20"><path d="M5 7l5 5 5-5H5z"/></svg>
                          </div>
                        )}
            
            <div class="filter-group ml-4">
              <h3 class="text-white text-lg mb-2">Show Only</h3>
              <div class="flex items-center">
                <input
                  type="checkbox"
                  id="important-filter"
                  class="mr-2"
                >
                <label for="important-filter" class="text-white">Important Characters</label>
              </div>
            </div>
            
            <div class="filter-group ml-auto">
              <h3 class="text-white text-lg mb-2">Search</h3>
              <input
                type="text"
                id="search-input"
                placeholder="Search characters..."
                class="appearance-none bg-space-black border border-starfleet-blue text-white p-2 rounded"
              >
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Characters container -->
    <div
      id="characters-container"
      class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"
    />
    
    <!-- Pagination controls -->
    <div class="flex justify-between items-center my-8">
      <div class="character-count px-3 py-1 bg-space-black rounded-full text-white text-sm" id="characters-count">
        {totalCharacters} characters
      </div>
      
      <div id="pagination-controls" class="flex justify-center items-center">
        <div class="lcars-pagination flex items-center bg-space-black border border-starfleet-blue rounded-lg overflow-hidden">
          <button id="prev-page" class="px-4 py-2 bg-starfleet-blue text-white hover:bg-starfleet-gold hover:text-space-black transition-colors">
            Previous
          </button>
          <div class="px-4 py-2 text-white">
            Page <span id="current-page-num">1</span> of <span id="total-pages">{totalPages}</span>
          </div>
          <button id="next-page" class="px-4 py-2 bg-starfleet-blue text-white hover:bg-starfleet-gold hover:text-space-black transition-colors">
            Next
          </button>
        </div>
      </div>
    </div>
    
    <!-- No results message (hidden by default) -->
    <div id="no-results" class="hidden text-center py-8">
      <div class="lcars-panel p-6 inline-block">
        <p class="text-console-blue text-xl">No characters match your search criteria.</p>
        <p class="text-white mt-2">Please adjust your filters or try a different search term.</p>
      </div>
    </div>
  </div>
</Layout>

<script
  id="initial-payload"
  type="application/json"
  set:html={JSON.stringify({
    characters: initialCharacters,
    totalPages: totalPages,
    totalCharacters: totalCharacters,
    pageSize: PAGE_SIZE,
    // Pass initial ranks too, species are already in the dropdown
    initialRanks: initialRanks
  })}
/>

<script>
  // Client-side STAPI client using the Netlify proxy
  const stapiClient = {
    PROXY_URL: '/api/characters', // Use the proxy endpoint

    async getCharacters(page = 0, pageSize = 48, filters = {}) {
      try {
        const params = new URLSearchParams({
          pageNumber: page.toString(),
          pageSize: pageSize.toString(),
        });

        // Add filter parameters
        for (const [key, value] of Object.entries(filters)) {
          if (value && value !== 'all') { // Only add active filters
            params.append(key, value);
          }
        }

        const url = `${this.PROXY_URL}?${params.toString()}`;
        console.log(`Fetching via proxy: ${url}`); // Log URL

        const response = await fetch(url); // Fetch from the proxy

        if (!response.ok) {
           const errorData = await response.json().catch(() => ({ error: 'Failed to parse error response' }));
           console.error(`Proxy fetch error! Status: ${response.status}`, errorData);
           throw new Error(`HTTP error! status: ${response.status}, details: ${errorData.error || response.statusText}`);
        }

        const data = await response.json();
        console.log(`Received page ${page} (filtered: ${JSON.stringify(filters)}):`, data); // Log received data
        return data; // Should contain { characters: [], page: { totalPages, totalElements } }
      } catch (error) {
        console.error('Error fetching characters via proxy:', error);
        // Return an empty structure on error to prevent crashes
        return { characters: [], page: { totalPages: 1, totalElements: 0 } };
      }
    }
    // Removed getMemoryAlphaImage - image handling simplified
  };


  document.addEventListener('DOMContentLoaded', () => {
    const payload = JSON.parse(document.getElementById('initial-payload').textContent);
    const PAGE_SIZE = payload.pageSize;
    let currentPage = 1;
    let totalPages = payload.totalPages;
    let totalCharacters = payload.totalCharacters;
    let allCharacters = [...payload.characters]; // Start with initial characters
    let loadedPages = new Set([0]); // Keep track of loaded pages (0-indexed)
    let isLoading = false; // Prevent multiple simultaneous fetches

    // DOM Elements
    const speciesFilter = document.getElementById('species-filter');
    const rankFilter = document.getElementById('rank-filter'); // Assuming rank filter exists
    const importantBox = document.getElementById('important-filter');
    const searchInput = document.getElementById('search-input');
    const prevBtn = document.getElementById('prev-page');
    const nextBtn = document.getElementById('next-page');
    const pageNum = document.getElementById('current-page-num');
    const totalNum = document.getElementById('total-pages');
    const countBadge = document.getElementById('characters-count');
    const container = document.getElementById('characters-container');
    const noResults = document.getElementById('no-results');

    const debounce = (fn, ms = 300) => {
      let t;
      return (...args) => {
        clearTimeout(t);
        t = setTimeout(() => fn(...args), ms);
      };
    };

    // Function to get current filter values from UI elements
    function getCurrentFilters() {
        const filters = {};
        const speciesVal = speciesFilter.value;
        const rankVal = rankFilter ? rankFilter.value : 'all';
        const importantOnly = importantBox.checked; // Assuming you'll add a filter param like 'isImportant' if needed by API
        const searchTerm = searchInput.value.trim();

        if (speciesVal !== 'all') filters.species = speciesVal; // Assuming API filter key is 'species'
        if (rankVal !== 'all') filters.title = rankVal; // Assuming API filter key is 'title' for rank
        if (importantOnly) filters.isImportant = 'true'; // Example: Adjust key/value as needed for API
        if (searchTerm) filters.name = searchTerm; // Assuming API filter key is 'name'

        return filters;
    }

    // Function to fetch a specific page *for the current filters* if not already loaded
    async function fetchPageIfNeeded(pageNumber) { // pageNumber is 1-based for UI
      const pageIndex = pageNumber - 1; // API is 0-based
      if (loadedPages.has(pageIndex) || isLoading) {
        return; // Already loaded for current filter set or already loading
      }

      isLoading = true;
      container.style.opacity = '0.5'; // Indicate loading

      try {
        // Fetch using current filters
        const data = await stapiClient.getCharacters(pageIndex, PAGE_SIZE, currentFilters);
        if (data.characters && data.characters.length > 0) {
          // Add new characters to our *current* set, avoid duplicates just in case
          const newChars = data.characters.filter(nc => !allCharacters.some(ac => ac.uid === nc.uid));
          allCharacters = [...allCharacters, ...newChars].sort((a, b) => a.name.localeCompare(b.name)); // Keep sorted
          loadedPages.add(pageIndex);

          // Update totals ONLY if they differ (e.g., first load of a filter set)
          // Subsequent page loads for the same filter set shouldn't change totals.
          if (data.page?.totalPages && data.page.totalPages !== totalPages) {
             totalPages = data.page.totalPages;
          }
          if (data.page?.totalElements && data.page.totalElements !== totalCharacters) {
             totalCharacters = data.page.totalElements;
          }

        } else {
          console.warn(`No characters returned for page ${pageIndex} with filters: ${JSON.stringify(currentFilters)}`);
          loadedPages.add(pageIndex); // Mark as loaded even if empty to prevent re-fetch
        }
      } catch (error) {
        console.error(`Failed to fetch page ${pageIndex} with filters:`, error);
        // Handle error display if needed
      } finally {
        isLoading = false;
        container.style.opacity = '1';
        render(); // Re-render with potentially new data or updated totals
      }
    }

    // Function to apply filters, fetch the first page, and update state
    async function applyFiltersAndFetch() {
        if (isLoading) return; // Don't apply if already loading

        currentPage = 1; // Reset to first page
        currentFilters = getCurrentFilters(); // Get latest filters from UI
        allCharacters = []; // Clear existing characters
        loadedPages = new Set(); // Clear loaded pages tracker
        isLoading = true; // Set loading flag
        container.innerHTML = '<p class="text-center text-white col-span-full">Loading...</p>'; // Show loading message
        noResults.classList.add('hidden'); // Hide no results message
        countBadge.textContent = `Loading...`;
        pageNum.textContent = '1';
        totalNum.textContent = '?'; // Indicate total pages unknown
        prevBtn.disabled = true;
        nextBtn.disabled = true;


        try {
            const data = await stapiClient.getCharacters(0, PAGE_SIZE, currentFilters); // Fetch page 0 (first page)
            allCharacters = data.characters || [];
            totalPages = data.page?.totalPages || 1;
            totalCharacters = data.page?.totalElements || allCharacters.length;
            loadedPages.add(0); // Mark page 0 as loaded for this filter set
        } catch (error) {
            console.error("Error applying filters and fetching initial data:", error);
            allCharacters = [];
            totalPages = 1;
            totalCharacters = 0;
            // Optionally display an error message in the container
            container.innerHTML = '<p class="text-center text-red-500 col-span-full">Error loading characters. Please try again.</p>';
        } finally {
            isLoading = false;
            render(); // Render the newly fetched data (or empty state/error)
        }
    }


    // Function to render the current page based *only* on the current slice of `allCharacters`
    function render() {
      // Update total count display based on the overall total for the current filter set
      countBadge.textContent = `${totalCharacters} characters found`;

      // Update pagination display (uses overall totalPages for the current filter set)
      pageNum.textContent = currentPage;
      totalNum.textContent = totalPages; // Display the overall total pages

      // Enable/disable pagination buttons based on overall totalPages
      prevBtn.disabled = currentPage <= 1 || isLoading;
      nextBtn.disabled = currentPage >= totalPages || isLoading;

      // Calculate the slice of `allCharacters` to display for the current page
      // Note: `allCharacters` might not contain all characters if not all pages are loaded yet,
      // but we slice based on the assumption it *could* hold everything up to the current page.
      const start = (currentPage - 1) * PAGE_SIZE;
      // We need to filter `allCharacters` to get only the items for the current page *index*
      // This assumes `allCharacters` is populated sequentially by `fetchPageIfNeeded`
      const pageItems = allCharacters.slice(start, start + PAGE_SIZE);

      // Display "No Results" message if totalCharacters is 0 after fetch/filter
      noResults.classList.toggle('hidden', totalCharacters > 0);
      container.classList.toggle('hidden', totalCharacters === 0); // Hide grid if no results

      // Render character cards for the current page's items
      if (totalCharacters > 0) {
          container.innerHTML = pageItems.map(c => {
             // Use character.image primarily, fallback to generic
             const imageUrl = c.image || '/images/generic-character.jpg';
             const slug = c.uid; // Use UID for link

             return `
               <div class="character-card bg-space-black border border-starfleet-blue rounded-lg overflow-hidden transition-transform hover:scale-105">
                 <a href="/characters/${slug}/" class="block">
                   <div class="character-image aspect-square bg-gray-800">
                     <img loading="lazy"
                          src="${imageUrl}"
                          alt="${c.name}"
                          class="w-full h-full object-cover opacity-80 group-hover:opacity-100 transition-opacity"
                          onerror="this.onerror=null; this.src='/images/generic-character.jpg';" />
                   </div>
                   <div class="character-info p-3 border-t border-starfleet-blue">
                     <h3 class="text-white font-semibold truncate" title="${c.name}">${c.name}</h3>
                     <p class="text-gray-400 text-sm">${c.characterSpecies?.[0]?.name || c.species?.[0]?.name || 'Unknown'}</p>
                   </div>
                 </a>
               </div>
             `;
            }).join('');
      } else if (!isLoading) {
          // Ensure loading message is removed if there are truly no results
          container.innerHTML = '';
      }
      // Removed Memory Alpha image fetching logic
    }

    // Debounced version of applying filters for search input
    const debouncedApplyFilters = debounce(applyFiltersAndFetch, 500);

    // Event Listeners - Trigger filter application
    speciesFilter.addEventListener('change', applyFiltersAndFetch);
    if (rankFilter) rankFilter.addEventListener('change', applyFiltersAndFetch);
    importantBox.addEventListener('change', applyFiltersAndFetch);
    searchInput.addEventListener('input', debouncedApplyFilters); // Use debounced version for search

    prevBtn.addEventListener('click', () => {
      if (currentPage > 1 && !isLoading) {
        currentPage--;
        // We assume the previous page's data is loaded if we were on page > 1
        // If not (e.g., direct URL access to page 5), fetchPageIfNeeded would handle it,
        // but standard navigation implies it's loaded.
        render(); // Just render the previous slice
      }
    });

    nextBtn.addEventListener('click', async () => {
       if (currentPage < totalPages && !isLoading) {
           const nextPageNum = currentPage + 1;
           // Fetch if needed *before* incrementing currentPage visually
           await fetchPageIfNeeded(nextPageNum);
           // Only increment if fetch didn't fail catastrophically and page exists
           if (currentPage < totalPages) { // Check totalPages again in case fetch failed
               currentPage++;
               render(); // Render the new page slice
           }
       }
    });

    // Initial Render on Load
    render(); // Render the initial data passed from the server
  });
</script>

<style>
  .lcars-character-container {
    position: relative;
    overflow: hidden;
    border-radius: 6px;
    transition: all 0.3s ease;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  }
  
  .lcars-character-container:hover {
    transform: translateY(-5px);
    box-shadow: 0 0 20px rgba(0, 178, 255, 0.4);
  }
  
  .character-image {
    position: relative;
  }
  
  .character-image img {
    transition: opacity 0.3s ease;
    opacity: 0.2;
  }
  
  .character-image img.loaded {
    opacity: 1;
  }
  
  .character-info {
    border-left: 3px solid var(--starfleet-gold);
    min-height: 80px;
  }
  
  .lcars-select, .lcars-input {
    transition: all 0.3s ease;
  }
  
  .lcars-select:focus, .lcars-input:focus {
    border-color: var(--starfleet-gold);
    outline: none;
    box-shadow: 0 0 10px rgba(0, 178, 255, 0.4);
  }
  
  .species-header {
    position: relative;
    overflow: hidden;
  }
  
  .species-header::after {
    content: '';
    position: absolute;
    left: -100%;
    top: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    animation: sweep 3s infinite;
  }
  
  /* Pagination styles */
  .lcars-pagination {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .lcars-pagination button {
    position: relative;
    z-index: 2;
    transition: all 0.2s ease;
  }
  
  .lcars-pagination button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .lcars-pagination::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 50%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 204, 0, 0.1), transparent);
    animation: sweep 2s infinite;
    z-index: 1;
  }
  
  @keyframes sweep {
    0% { left: -100%; }
    100% { left: 100%; }
  }
</style>