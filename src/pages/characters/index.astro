---
import Layout from '../../layouts/Layout.astro';
import { stapiService, getStaticImage } from '../../services/stapiService';

// Pagination settings
const PAGE_SIZE = 48; // Number of characters to display per page
const currentPage = 1; // Default to first page

// Fetch all characters data from STAPI
let characters = [];
try {
  characters = await stapiService.getAllCharacters();
} catch (error) {
  console.error('Error fetching characters:', error);
}

// Organize characters by species
const charactersBySpecies = new Map();           // Map<string, Character[]>
const seen = new Set();                          // uid dedup for final display

// Process characters for species categorization
characters.forEach(c => {
  // Check for both species and characterSpecies properties
  // STAPI API can return either depending on the endpoint
  let speciesList = [];
  
  // More robust species extraction
  if (c.characterSpecies && Array.isArray(c.characterSpecies) && c.characterSpecies.length > 0) {
    speciesList = c.characterSpecies;
  } else if (c.species && Array.isArray(c.species) && c.species.length > 0) {
    speciesList = c.species;
  } else if (c.characterSpecies === null && c.species === null) {
    // Default to Unknown if both species fields are explicitly null
    speciesList = [{ name: 'Unknown' }];
  } else {
    // Default to Human only if we're sure there's no species data
    speciesList = [{ name: 'Human' }];
  }
  
  
  // If speciesList is empty or contains only null/undefined values, default to Unknown
  if (speciesList.length === 0 || speciesList.every(s => !s || !s.name)) {
    speciesList = [{ name: 'Unknown' }];
  }
  
  speciesList.forEach(s => {
    // Ensure we have a valid species name
    const key = (s && s.name) ? s.name : 'Unknown';
    
    if (!charactersBySpecies.has(key)) {
      charactersBySpecies.set(key, []);
    }
    
    // Only add if we haven't seen this UID before
    if (!seen.has(c.uid)) {
      charactersBySpecies.get(key).push(c);
      seen.add(c.uid);
    }
  });
});

// Sort species names alphabetically, but put "Human" and "Unknown" at the top
const speciesNames = [...charactersBySpecies.keys()].sort((a, b) => {
  if (a === 'Human') return -1;
  if (b === 'Human') return 1;
  if (a === 'Unknown') return -1;
  if (b === 'Unknown') return 1;
  return a.localeCompare(b);
});

// Implement pagination for better performance
// Calculate total number of characters across all species
let totalCharacters = 0;
charactersBySpecies.forEach((chars) => {
  totalCharacters += chars.length;
});

const totalPages = Math.ceil(totalCharacters / PAGE_SIZE);
// Single summary log
console.log(`Found ${speciesNames.length} species, ${totalCharacters} total characters`);

// Enhance character data with Memory Alpha information
// Increase the budget to ensure more images load
const IMAGE_BUDGET = 800;          // increased from 400
let downloaded = 0;

// Process images more efficiently by prioritizing visible characters first
// We'll process a subset of characters from each species rather than all at once
for (const [specie, list] of charactersBySpecies) {
  // Process first 20 characters of each species to ensure good coverage
  const charsToProcess = list.slice(0, 20);
  
  for (const char of charsToProcess) {
    if (downloaded >= IMAGE_BUDGET) break;

    // Expand abbreviated names (e.g. "J. Kirk" â†’ "James T. Kirk")
    const queryName = char.name.match(/^[A-Z]\./) ? char.fullName ?? char.name : char.name;

    try {
      const wiki = await stapiService.getMemoryAlphaContent(queryName);
      if (wiki?.image?.includes('placeholder') || wiki?.image?.endsWith('.svg')) {
        // keep searching, don't count towards budget
      } else if (wiki?.image) {
        char.wikiImage = wiki.image;
        downloaded++;
      }
      
      if (wiki?.wikiUrl) {
        char.wikiUrl = wiki.wikiUrl;
      }
    } catch (error) {
      console.error(`Error fetching wiki content for ${queryName}:`, error);
    }
  }
}


// Fallback data if API fails
if (speciesNames.length === 0) {
  const fallbackCharacters = [
    {
      name: "Captain James T. Kirk",
      species: "Human",
      uid: "kirk",
      image: stapiService.getImageUrl("James T. Kirk", 'character'),
      description: "Captain of the USS Enterprise"
    },
    {
      name: "Captain Jean-Luc Picard",
      species: "Human",
      uid: "picard",
      image: stapiService.getImageUrl("Jean-Luc Picard", 'character'),
      description: "Captain of the USS Enterprise-D and E"
    },
    {
      name: "Captain Benjamin Sisko",
      species: "Human",
      uid: "sisko",
      image: stapiService.getImageUrl("Benjamin Sisko", 'character'),
      description: "Commander of Deep Space Nine"
    },
    {
      name: "Captain Kathryn Janeway",
      species: "Human",
      uid: "janeway",
      image: stapiService.getImageUrl("Kathryn Janeway", 'character'),
      description: "Captain of the USS Voyager"
    },
    {
      name: "Spock",
      species: "Vulcan/Human",
      uid: "spock",
      image: stapiService.getImageUrl("Spock", 'character'),
      description: "Science Officer of the USS Enterprise"
    },
    {
      name: "Worf",
      species: "Klingon",
      uid: "worf",
      image: stapiService.getImageUrl("Worf", 'character'),
      description: "Security Officer"
    }
  ];
  
  // Populate charactersBySpecies with fallback data
  charactersBySpecies.set("Human", fallbackCharacters.filter(c => c.species === "Human"));
  charactersBySpecies.set("Vulcan/Human", fallbackCharacters.filter(c => c.species === "Vulcan/Human"));
  charactersBySpecies.set("Klingon", fallbackCharacters.filter(c => c.species === "Klingon"));
  speciesNames.push("Human", "Vulcan/Human", "Klingon");
}

// Prepare data for filtering
let availableRanks = [];
// Extract unique ranks
characters.forEach(character => {
  if (character.title?.trim() && !availableRanks.includes(character.title)) {
    availableRanks.push(character.title);
  }
});
availableRanks.sort();

// Create JSON-LD schema for characters page
const charactersSchema = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "Star Trek Characters | Complete Guide to Characters in the Star Trek Universe",
  "description": "Explore the diverse characters of Star Trek from all series and movies. Learn about captains, officers, aliens, and more from across the Federation and beyond.",
  "url": "https://star-trek-timelines.netlify.app/characters/",
  "isPartOf": {
    "@type": "WebSite",
    "name": "Star Trek Timelines",
    "url": "https://star-trek-timelines.netlify.app/"
  },
  "about": {
    "@type": "CreativeWorkSeries",
    "name": "Star Trek",
    "description": "Science fiction media franchise created by Gene Roddenberry"
  },
  "hasPart": [...charactersBySpecies.entries()].slice(0, 5).flatMap(([species, chars]) => {
    return chars.slice(0, 5).map(char => ({
      "@type": "Person",
      "name": char.name,
      "url": `https://star-trek-timelines.netlify.app/characters/${char.uid}/`,
      "jobTitle": char.title || "Officer",
      "description": `${species} character from Star Trek`
    }));
  })
};
---

<Layout
  title="Star Trek Characters | Complete Guide to Characters in the Star Trek Universe"
  description="Explore the diverse characters of Star Trek from all series and movies. Learn about captains, officers, aliens, and more from across the Federation and beyond."
  schemaData={charactersSchema}
>
  
  <div class="container mx-auto px-4 py-12">
    <div class="lcars-header mb-8">
      <div class="lcars-header-content">
        <h1 class="text-3xl">Federation Personnel Database</h1>
      </div>
    </div>
    
    <div class="lcars-panel mb-12">
      <div class="lcars-top-bar flex">
        <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
        <div class="flex-1 h-8 bg-starfleet-blue"></div>
        <div class="w-16 h-8 bg-starfleet-red"></div>
      </div>
      
      <div class="panel-content p-6">
        <p class="text-gray-300 mb-6">
          Accessing Federation personnel records... This database contains information on notable individuals
          from across the Star Trek universe, organized by species and rank. Explore the profiles of Starfleet officers,
          diplomats, scientists, and others who have shaped the history of the galaxy.
        </p>
        
        <div class="filters mb-8">
          <div class="flex flex-wrap gap-4">
            <div class="filter-group">
              <h3 class="text-white text-lg mb-2">Filter by Species</h3>
              <select
                id="species-filter"
                class="appearance-none bg-space-black text-white p-2 pr-8 border border-starfleet-blue rounded relative"
              >
                <option value="all">All Species</option>
                {speciesNames.map(species => (
                  <option value={species}>{species}</option>
                ))}
              </select>
              <!-- chevron -->
              <svg class="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 fill-starfleet-gold"
                   viewBox="0 0 20 20"><path d="M5 7l5 5 5-5H5z"/></svg>
            </div>
            
            {availableRanks.length > 0 && (
              <div class="filter-group">
                <h3 class="text-white text-lg mb-2">Filter by Rank</h3>
                <select
                  id="rank-filter"
                  class="appearance-none bg-space-black text-white p-2 pr-8 border border-starfleet-blue rounded relative"
                >
                  <option value="all">All Ranks</option>
                  {availableRanks.map(rank => (
                    <option value={rank}>{rank}</option>
                  ))}
                </select>
                <!-- chevron -->
                <svg class="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 fill-starfleet-gold"
                     viewBox="0 0 20 20"><path d="M5 7l5 5 5-5H5z"/></svg>
              </div>
            )}
            
            <div class="filter-group ml-4">
              <h3 class="text-white text-lg mb-2">Show Only</h3>
              <div class="flex items-center">
                <input
                  type="checkbox"
                  id="important-filter"
                  class="mr-2"
                >
                <label for="important-filter" class="text-white">Important Characters</label>
              </div>
            </div>
            
            <div class="filter-group ml-auto">
              <h3 class="text-white text-lg mb-2">Search</h3>
              <input
                type="text"
                id="search-input"
                placeholder="Search characters..."
                class="appearance-none bg-space-black border border-starfleet-blue text-white p-2 rounded"
              >
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Characters container -->
    <div
      id="characters-container"
      class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"
    />
    
    <!-- Pagination controls -->
    <div class="flex justify-between items-center my-8">
      <div class="character-count px-3 py-1 bg-space-black rounded-full text-white text-sm" id="characters-count">
        {totalCharacters} characters
      </div>
      
      <div id="pagination-controls" class="flex justify-center items-center">
        <div class="lcars-pagination flex items-center bg-space-black border border-starfleet-blue rounded-lg overflow-hidden">
          <button id="prev-page" class="px-4 py-2 bg-starfleet-blue text-white hover:bg-starfleet-gold hover:text-space-black transition-colors">
            Previous
          </button>
          <div class="px-4 py-2 text-white">
            Page <span id="current-page-num">1</span> of <span id="total-pages">{totalPages}</span>
          </div>
          <button id="next-page" class="px-4 py-2 bg-starfleet-blue text-white hover:bg-starfleet-gold hover:text-space-black transition-colors">
            Next
          </button>
        </div>
      </div>
    </div>
    
    <!-- No results message (hidden by default) -->
    <div id="no-results" class="hidden text-center py-8">
      <div class="lcars-panel p-6 inline-block">
        <p class="text-console-blue text-xl">No characters match your search criteria.</p>
        <p class="text-white mt-2">Please adjust your filters or try a different search term.</p>
      </div>
    </div>
  </div>
</Layout>

<script
  id="initial-payload"
  type="application/json"
  set:html={JSON.stringify(Object.fromEntries(charactersBySpecies))}
/>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const payload = JSON.parse(
      document.getElementById('initial-payload').textContent
    );
    const allChars = Object.values(payload).flat();
    const PAGE_SIZE = 48;
    let currentPage = 1;

    // Grab your inputs/buttons by ID (ensure these IDs exist in your markup)
    const speciesFilter = document.getElementById('species-filter');
    const importantBox  = document.getElementById('important-filter');
    const searchInput   = document.getElementById('search-input');
    const prevBtn       = document.getElementById('prev-page');
    const nextBtn       = document.getElementById('next-page');
    const pageNum       = document.getElementById('current-page-num');
    const totalNum      = document.getElementById('total-pages');
    const countBadge    = document.getElementById('characters-count');
    const container     = document.getElementById('characters-container');

    const debounce = (fn, ms=200) => {
      let t; return (...args) => {
        clearTimeout(t);
        t = setTimeout(() => fn(...args), ms);
      };
    };

    function render() {
      const term = searchInput.value.trim().toLowerCase();
      let list = allChars.filter(c => {
        if (speciesFilter.value !== 'all' && c.speciesName !== speciesFilter.value)
          return false;
        if (importantBox.checked && !c.isImportant)
          return false;
        if (term && !c.name.toLowerCase().includes(term))
          return false;
        return true;
      });

      const totalPages = Math.max(1, Math.ceil(list.length / PAGE_SIZE));
      if (currentPage > totalPages) currentPage = totalPages;

      // Update UI labels
      countBadge.textContent = `${list.length} characters`;
      pageNum.textContent    = currentPage;
      totalNum.textContent   = totalPages;

      // Render only one page of cards
      const start = (currentPage - 1) * PAGE_SIZE;
      const page  = list.slice(start, start + PAGE_SIZE);
      container.innerHTML = page.map(c => `
        <div class="character-card">
          <a href="/characters/${c.slug || c.uid}/">
            <div class="character-image">
              <img loading="lazy"
                   src="${c.wikiImage||c.image||'/images/generic-character.jpg'}"
                   alt="${c.name}" />
            </div>
            <div class="character-info"><h3>${c.name}</h3></div>
          </a>
        </div>
      `).join('');
    }

    // Wire up events
    speciesFilter.addEventListener('change', () => { currentPage = 1; render(); });
    importantBox .addEventListener('change', () => { currentPage = 1; render(); });
    searchInput .addEventListener('input', debounce(() => { currentPage = 1; render(); }));
    prevBtn     .addEventListener('click', () => { if (currentPage>1){currentPage--;render();} });
    nextBtn     .addEventListener('click', () => { currentPage++; render(); });

    render();  // first paint
  });
</script>

<style>
  .lcars-character-container {
    position: relative;
    overflow: hidden;
    border-radius: 6px;
    transition: all 0.3s ease;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  }
  
  .lcars-character-container:hover {
    transform: translateY(-5px);
    box-shadow: 0 0 20px rgba(0, 178, 255, 0.4);
  }
  
  .character-image {
    position: relative;
  }
  
  .character-image img {
    transition: opacity 0.3s ease;
    opacity: 0.2;
  }
  
  .character-image img.loaded {
    opacity: 1;
  }
  
  .character-info {
    border-left: 3px solid var(--starfleet-gold);
    min-height: 80px;
  }
  
  .lcars-select, .lcars-input {
    transition: all 0.3s ease;
  }
  
  .lcars-select:focus, .lcars-input:focus {
    border-color: var(--starfleet-gold);
    outline: none;
    box-shadow: 0 0 10px rgba(0, 178, 255, 0.4);
  }
  
  .species-header {
    position: relative;
    overflow: hidden;
  }
  
  .species-header::after {
    content: '';
    position: absolute;
    left: -100%;
    top: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    animation: sweep 3s infinite;
  }
  
  /* Pagination styles */
  .lcars-pagination {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .lcars-pagination button {
    position: relative;
    z-index: 2;
    transition: all 0.2s ease;
  }
  
  .lcars-pagination button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .lcars-pagination::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 50%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 204, 0, 0.1), transparent);
    animation: sweep 2s infinite;
    z-index: 1;
  }
  
  @keyframes sweep {
    0% { left: -100%; }
    100% { left: 100%; }
  }
</style>