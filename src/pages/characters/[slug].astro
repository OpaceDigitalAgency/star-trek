---
import Layout from '../../layouts/Layout.astro';
import { stapiService } from '../../services/stapiService';
import { slugify } from '../../utils/slugify.js';


export const prerender = false;

export async function get({ params, request }) {
  const slug = params.slug;
  console.log(`[slug].astro: Processing request for slug: "${slug}"`);
  
  try {
    // First try the API endpoint (works in production with redirects)
    const url = new URL(request.url);
    url.pathname = '/api/characters';
    url.searchParams.set('slug', slug);
    const res = await fetch(url);
    
    if (res.ok) {
      const character = await res.json();
      console.log(`[slug].astro: Successfully fetched character from API: ${character?.name || 'unknown'}`);
      return { props: { character } };
    }
  } catch (error) {
    console.error('[slug].astro: Error fetching from API:', error);
  }
  
  // Fallback for local development: load characters directly from JSON
  try {
    console.log('[slug].astro: Falling back to local JSON data');
    const fs = await import('fs');
    const path = await import('path');
    const { slugify } = await import('../../utils/slugify.js');
    
    const charactersPath = path.join(process.cwd(), 'src', 'data', 'characters.json');
    console.log(`[slug].astro: Loading characters from: ${charactersPath}`);
    const charactersData = JSON.parse(fs.readFileSync(charactersPath, 'utf8'));
    console.log(`[slug].astro: Loaded ${charactersData.length} characters from JSON`);
    
    // Extract UID from the slug - handle different formats
    // Format could be: name-slug-UIDVALUE or just UIDVALUE (like 0413-theta-CHMA0000215045 or CHMA0000215045)
    let uid = null;
    
    // Try to extract UID with CHMA format
    const chmaMatch = slug.match(/CHMA\d+/);
    if (chmaMatch) {
      uid = chmaMatch[0];
      console.log(`[slug].astro: Extracted CHMA UID from slug: ${uid}`);
    }
    // If no CHMA format, try to extract numeric/alphanumeric ID at the end or beginning
    else {
      const numericMatch = slug.match(/^([0-9]+)|([0-9]+)$/);
      if (numericMatch) {
        uid = numericMatch[0];
        console.log(`[slug].astro: Extracted numeric UID from slug: ${uid}`);
      } else {
        // Try to extract any alphanumeric sequence that might be a UID
        const alphaNumMatch = slug.match(/([A-Z0-9]+)$/);
        if (alphaNumMatch) {
          uid = alphaNumMatch[0];
          console.log(`[slug].astro: Extracted alphanumeric UID from slug: ${uid}`);
        }
      }
    }
    
    // First try to find by UID extracted from the slug
    let character = uid ? charactersData.find(c => c.uid === uid) : null;
    if (character) {
      console.log(`[slug].astro: Found character by UID: ${character.name}`);
    }
    
    // If not found by UID, try to find by full slug match
    if (!character) {
      character = charactersData.find(c => {
        const nameSlug = slugify(c.name);
        const fullSlug = `${nameSlug}-${c.uid}`;
        return fullSlug === slug;
      });
      if (character) {
        console.log(`[slug].astro: Found character by full slug match: ${character.name}`);
      }
    }
    
    // If still not found, try to find by just the slug itself as UID
    if (!character) {
      character = charactersData.find(c => c.uid === slug);
      if (character) {
        console.log(`[slug].astro: Found character by slug as UID: ${character.name}`);
      }
    }
    
    // If still not found, try to find by slugified name
    if (!character) {
      character = charactersData.find(c => slugify(c.name) === slug);
      if (character) {
        console.log(`[slug].astro: Found character by slugified name: ${character.name}`);
      }
    }
    
    // Look for the specific character by the full slug
    if (!character) {
      // For the specific case of "0413-theta-CHMA0000215045"
      const chmaMatch = slug.match(/(.*?)-(CHMA\d+)$/);
      if (chmaMatch) {
        const nameSlug = chmaMatch[1]; // "0413-theta"
        const uid = chmaMatch[2];      // "CHMA0000215045"
        console.log(`[slug].astro: Parsed slug "${slug}" into nameSlug="${nameSlug}" and uid="${uid}"`);
        
        // Try to find by UID
        character = charactersData.find(c => c.uid === uid);
        if (character) {
          console.log(`[slug].astro: Found character by parsed UID: ${character.name}`);
        }
      }
    }
    
    // Direct lookup by image filename
    if (!character) {
      // Check if there's a matching image in the character-cache directory
      const imagePath = path.join(process.cwd(), 'public', 'images', 'character-cache', `${slug}.jpg`);
      console.log(`[slug].astro: Checking for image at ${imagePath}`);
      
      try {
        if (fs.existsSync(imagePath)) {
          console.log(`[slug].astro: Found matching image file for slug: ${slug}`);
          // Extract UID from filename
          const uidMatch = slug.match(/(CHMA\d+)$/);
          if (uidMatch) {
            const uid = uidMatch[1];
            character = charactersData.find(c => c.uid === uid);
            if (character) {
              console.log(`[slug].astro: Found character by image filename UID: ${character.name}`);
            }
          }
        }
      } catch (error) {
        console.error(`[slug].astro: Error checking for image file: ${error}`);
      }
    }
    
    if (character) {
      return { props: { character } };
    } else {
      console.log(`[slug].astro: No character found for slug: ${slug}`);
    }
  } catch (error) {
    console.error('[slug].astro: Error loading character from JSON:', error);
  }
  
  // If all methods fail, return null character (will redirect in component)
  console.log('[slug].astro: All lookup methods failed, returning null character');
  return { props: { character: null } };
}

// Get the character from props
const { character } = Astro.props;

// Handle case when character is not found
if (!character) {
  return Astro.redirect('/characters');
}

// Create JSON-LD schema for character page
const characterSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  "name": character.name,
  "description": `${character.name} is a character from Star Trek.`,
  "url": `https://star-trek-timelines.netlify.app/characters/${slugify(character.name)}/`,
  "jobTitle": character.title || "Officer",
  "image": character.wikiImage || character.image || "/images/generic-character.jpg"
};
---

<Layout 
  title={`${character.name} | Star Trek Character Profile`}
  description={`Learn about ${character.name}, a character from Star Trek.`}
  schemaData={characterSchema}
>
  <div class="container mx-auto px-4 py-12">
    <div class="lcars-header mb-8">
      <div class="lcars-header-content">
        <h1 class="text-3xl">{character.name}</h1>
      </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
      <div class="md:col-span-1">
        <div class="lcars-panel">
          <div class="lcars-top-bar flex">
            <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
            <div class="flex-1 h-8 bg-starfleet-blue"></div>
          </div>
          
          <div class="panel-content p-6">
            <div class="character-image aspect-square overflow-hidden mb-4">
              <img
                src={character.wikiImage || character.image || "/images/generic-character.jpg"}
                alt={character.name}
                class="w-full h-full object-cover"
                onerror="this.onerror=null; this.src='/images/generic-character.jpg';"
              />
            </div>
            
            {character.wikiUrl && (
              <a href={character.wikiUrl} target="_blank" rel="noopener noreferrer" class="text-starfleet-gold hover:underline inline-flex items-center mt-4">
                View on Memory Alpha <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-1"><path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"></path><path d="M15 3h6v6"></path><path d="M10 14L21 3"></path></svg>
              </a>
            )}
          </div>
        </div>
      </div>
      
      <div class="md:col-span-2">
        <div class="lcars-panel">
          <div class="lcars-top-bar flex">
            <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
            <div class="flex-1 h-8 bg-starfleet-blue"></div>
            <div class="w-16 h-8 bg-starfleet-red"></div>
          </div>
          
          <div class="panel-content p-6">
            <h2 class="text-2xl text-starfleet-gold mb-4">Character Profile</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              {character.gender && (
                <div class="profile-item">
                  <h3 class="text-white text-lg">Gender</h3>
                  <p class="text-gray-300">{character.gender}</p>
                </div>
              )}
              
              {character.yearOfBirth && (
                <div class="profile-item">
                  <h3 class="text-white text-lg">Year of Birth</h3>
                  <p class="text-gray-300">{character.yearOfBirth}</p>
                </div>
              )}
              
              {character.yearOfDeath && (
                <div class="profile-item">
                  <h3 class="text-white text-lg">Year of Death</h3>
                  <p class="text-gray-300">{character.yearOfDeath}</p>
                </div>
              )}
              
              {character.title && (
                <div class="profile-item">
                  <h3 class="text-white text-lg">Rank/Title</h3>
                  <p class="text-gray-300">{character.title}</p>
                </div>
              )}
              
              {character.characterSpecies && character.characterSpecies.length > 0 && (
                <div class="profile-item">
                  <h3 class="text-white text-lg">Species</h3>
                  <p class="text-gray-300">
                    {character.characterSpecies.map(s => s.name).join(', ')}
                  </p>
                </div>
              )}
            </div>
            
            <div class="mt-8">
              <a href="/characters/" class="inline-flex items-center text-starfleet-gold hover:underline">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M19 12H5M12 19l-7-7 7-7"/></svg>
                Back to Characters
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<!-- No longer needed since we're using standard img tag -->

<style>
  .character-image {
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  }
  
  .profile-item {
    margin-bottom: 1rem;
  }
  
  .profile-item h3 {
    margin-bottom: 0.25rem;
  }
</style>