---
import Layout from '../../layouts/Layout.astro';
import seriesList from '../../data/series.json'; // Used only for slugs initially
import { slugify } from '../../utils/slugify.js'; // Import the utility
import path from 'path'; // Import path module for file extension handling

export const prerender = true;

// Import series characters data
import seriesCharactersData from '../../data/series-characters.json';

// Fetch all data needed for each series page at build time
export async function getStaticPaths() {
  const paths = seriesList.map((seriesStub) => {
    const slug = seriesStub.slug || slugify(seriesStub.title);
    let seriesData = seriesStub;
    let episodesBySeason = {};
    let castWithDetails = [];

    try {
      // Get cast data from series-characters.json
      const slugifiedTitle = slugify(seriesData.title);
      const cast = seriesCharactersData[slugifiedTitle] || [];
      
      // Add cast to series data
      seriesData = {
        ...seriesData,
        cast: cast,
        episodes: seriesData.episodes || [],
        slug: seriesData.slug || slugify(seriesData.title)
      };

      // --- Process Episodes ---
      if (Array.isArray(seriesData.episodes) && seriesData.episodes.length > 0) {
        // Group episodes correctly by season number
        episodesBySeason = seriesData.episodes.reduce((acc, ep) => {
          const seasonNum = ep.season?.seasonNumber;
          const key = (typeof seasonNum === 'number' && !isNaN(seasonNum)) ? String(seasonNum) : "Unknown";
          if (!acc[key]) acc[key] = [];
          acc[key].push(ep);
          return acc;
        }, {});

        // Sort episodes within each season by episode number
        Object.values(episodesBySeason).forEach(eps => {
          eps.sort((a, b) => (a.episodeNumber ?? Infinity) - (b.episodeNumber ?? Infinity));
        });
      }

      // --- Process Cast ---
      if (Array.isArray(seriesData.cast) && seriesData.cast.length > 0) {
        // Process cast data, ensuring correct image path generation
        castWithDetails = seriesData.cast.map(member => {
          // Use existing image path if available, otherwise generate one
          const imagePath = member.image || '/images/generic-character.jpg';
          
          return {
            ...member,
            characterSlug: slugify(member.name || 'unknown-character'),
            imagePath: imagePath,
          };
        });
      }
    } catch (error) {
      console.error(`Error processing data for series ${slug}:`, error);
      // Allow build to continue but page will show "Not Found"
      return { params: { slug }, props: { seriesData: null, episodesBySeason: {}, castWithDetails: [] } };
    }

    // Pass data as props
    return {
      params: { slug },
      props: { seriesData, episodesBySeason, castWithDetails }
    };
  });

  return paths;
}

// --- Component Script ---
// Get data passed from getStaticPaths
const { seriesData, episodesBySeason, castWithDetails } = Astro.props;

// Handle missing series gracefully (if fetch failed in getStaticPaths)
const notFound = !seriesData;
const slug = Astro.params.slug; // Still need slug for image path

// Use seriesData for page content, fall back if needed
const pageTitle = notFound ? "Series Not Found" : seriesData.title || "Untitled Series";
const pageDescription = notFound
  ? "No series found for this slug."
  : seriesData.wikiSummary || seriesData.description || `Learn about the Star Trek series: ${pageTitle}.`;

// JSON-LD schema for SEO
const seriesSchema = !notFound && seriesData
  ? {
      "@context": "https://schema.org",
      "@type": "TVSeries",
      "name": seriesData.title,
      "alternateName": seriesData.abbreviation || "",
      "description": seriesData.wikiSummary || seriesData.description || "",
      "url": seriesData.wikiUrl || Astro.url.toString(), // Use actual page URL as fallback
      // Use cached image path if available, otherwise fallback
      // Use series UID for image path, matching cache script
      "image": seriesData.uid ? `/images/series-cache/${seriesData.uid}.jpg` : '/images/stars-placeholder.jpg', // Default extension .jpg assumed by cache script
      "temporalCoverage": seriesData.stardate || "",
      "numberOfEpisodes": seriesData.episodesCount || (seriesData.episodes?.length ?? "?"), // Use count from function if available
      "numberOfSeasons": seriesData.seasonsCount || (Object.keys(episodesBySeason)?.length ?? "?"),
      "productionCompany": typeof seriesData.productionCompany === "object"
        ? seriesData.productionCompany?.name || "Paramount"
        : seriesData.productionCompany || "Paramount",
      "countryOfOrigin": "United States",
      "inLanguage": "English"
      // Consider adding cast details if relevant for schema
    }
  : null;
---
<Layout
  title={pageTitle}
  description={pageDescription}
  schemaData={seriesSchema}
>
  <div class="container mx-auto px-4 py-12">
    {notFound ? (
      <div class="text-center text-red-500 text-2xl py-24">
        <h1>Series Not Found</h1>
        <p>Sorry, we couldn't find a series for this URL.</p>
        <a href="/series/" class="text-starfleet-gold hover:underline mt-4 inline-block">Back to Series List</a>
      </div>
    ) : (
      <>
        {/* Main content container */}
        <div class="lcars-header mb-8">
          <div class="lcars-header-content">
            <h1 class="text-3xl">{seriesData.title}</h1>
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div class="md:col-span-1">
            <div class="lcars-panel">
              <div class="lcars-top-bar flex">
                <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
                <div class="flex-1 h-8 bg-starfleet-blue"></div>
              </div>

              <div class="panel-content p-6">
                <div class="series-image aspect-video overflow-hidden mb-4">
                  {/* Use cached image path */}
                  <img
                    {/* Use series UID for image path, matching cache script */}
                    src={seriesData.uid ? `/images/series-cache/${seriesData.uid}.jpg` : '/images/stars-placeholder.jpg'}
                    alt={`Poster for ${seriesData.title}`}
                    class="w-full h-full object-cover"
                    loading="lazy"
                    onerror="this.onerror=null; this.src='/images/stars-placeholder.jpg';" // Simplified fallback
                  />
                </div>

                <div class="series-meta space-y-2 mt-6">
                  <div class="flex justify-between">
                    <span class="text-gray-400">Abbreviation:</span>
                    <span class="text-white">{seriesData.abbreviation || "N/A"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Air Date:</span>
                    <span class="text-white">{seriesData.years || "Unknown"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Stardate:</span>
                    <span class="text-white">{seriesData.stardate || "Unknown"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Seasons:</span>
                    <span class="text-white">{seriesData.seasonsCount ?? Object.keys(episodesBySeason).length ?? "?"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Episodes:</span>
                    <span class="text-white">{seriesData.episodesCount ?? Object.values(episodesBySeason).flat().length ?? "?"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Network:</span>
                    <span class="text-white">{seriesData.originalBroadcaster?.name || "Various"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Production:</span>
                    <span class="text-white">
                      {typeof seriesData.productionCompany === "object"
                        ? seriesData.productionCompany?.name || "Paramount"
                        : seriesData.productionCompany || "Paramount"}
                    </span>
                  </div>
                </div>

                {seriesData.wikiUrl && (
                  <a href={seriesData.wikiUrl} target="_blank" rel="noopener noreferrer" class="text-starfleet-gold hover:underline inline-flex items-center mt-4">
                    View on Memory Alpha <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-1"><path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"></path><path d="M15 3h6v6"></path><path d="M10 14L21 3"></path></svg>
                  </a>
                )}
              </div>
            </div>
          </div>
          
          <div class="md:col-span-2">
            <div class="lcars-panel">
              <div class="lcars-top-bar flex">
                <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
                <div class="flex-1 h-8 bg-starfleet-blue"></div>
                <div class="w-16 h-8 bg-starfleet-red"></div>
              </div>
              
              <div class="panel-content p-6">
                <h2 class="text-2xl text-starfleet-gold mb-4">Series Overview</h2>
                
                <div class="series-description text-gray-300 mb-6 space-y-4">
                  {/* Use set:html for potentially HTML content */}
                  <Fragment set:html={seriesData.wikiSummary || seriesData.description || `<p>${seriesData.title} is a Star Trek series that aired from ${seriesData.years || "Unknown"}.</p>`} />
                </div>

                {/* Timeline Placement Section - Enhanced */}
                <h3 class="text-xl text-starfleet-gold mb-3">Timeline Placement</h3>
                <div class="timeline-info bg-space-black bg-opacity-50 p-4 border-l-4 border-starfleet-blue mb-6">
                  <div class="flex items-center mb-2">
                    <div class="w-4 h-4 bg-starfleet-gold rounded-full mr-2"></div>
                    <span class="text-starfleet-gold font-bold">Starfleet Temporal Database</span>
                  </div>
                  <p class="text-gray-300">
                    <span class="text-starfleet-blue font-bold">{seriesData.title}</span> is set
                    {seriesData.stardate && seriesData.stardate !== "Unknown" ?
                      <span class="text-starfleet-gold"> in the years {seriesData.stardate}, </span> : " "}
                    {(() => {
                      const title = seriesData.title || "";
                      if (title.includes("Original")) return "during the historic Five-Year Mission under Captain Kirk.";
                      if (title.includes("Next Generation")) return "during the 24th century aboard the Federation flagship Enterprise-D.";
                      if (title.includes("Deep Space Nine")) return "during the tumultuous Dominion War era on a strategic space station.";
                      if (title.includes("Voyager")) return "during the legendary Delta Quadrant expedition, 70,000 light years from home.";
                      if (title.includes("Enterprise")) return "in the pioneering early days of Starfleet, before the Federation was formed.";
                      if (title.includes("Picard")) return "in the post-Dominion War era, following the legendary admiral's final adventures.";
                      if (title.includes("Discovery")) return "across multiple eras, primarily the 23rd and 32nd centuries, following an unprecedented time jump.";
                      if (title.includes("Lower Decks")) return "shortly after the Dominion War, focusing on the unsung heroes of Starfleet.";
                      if (title.includes("Prodigy")) return "in the Delta Quadrant after Voyager's return, featuring a new generation of explorers.";
                      if (title.includes("Strange New Worlds")) return "before the Original Series, chronicling the early voyages of the Enterprise.";
                      return "in the Star Trek timeline.";
                    })()}
                  </p>
                </div>
                
                <div class="mt-8">
                  <a href="/series/" class="inline-flex items-center text-starfleet-gold hover:underline">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M19 12H5M12 19l-7-7 7-7"/></svg>
                    Back to Series
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Cast Section */}
        <div class="mt-12">
          <div class="lcars-panel">
            <div class="lcars-top-bar flex">
              <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
              <div class="flex-1 h-8 bg-starfleet-blue"></div>
              <div class="w-16 h-8 bg-starfleet-red"></div>
            </div>
            
            <div class="panel-content p-6">
              <h2 class="text-2xl text-starfleet-gold mb-4">Cast</h2>
              <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                {castWithDetails.length === 0 ? (
                  <p class="text-gray-300 col-span-full">No cast information available.</p>
                ) : (
                  castWithDetails.map(member => (
                    <div class="cast-member text-center" style="min-width:0">
                      <a href={`/characters/${member.characterSlug}/`} class="block group">
                        <div class="aspect-square overflow-hidden rounded-lg mb-2 transition-transform duration-300 group-hover:scale-105">
                          <img
                            src={member.imagePath}
                            alt={`Image of ${member.name}`}
                            class="w-full h-full object-cover"
                            loading="lazy"
                            onerror="this.onerror=null; this.src='/images/generic-character.jpg';"
                          />
                        </div>
                        <span class="text-starfleet-gold group-hover:underline text-sm block truncate">{member.name}</span>
                      </a>
                      {member.performer && (
                        <div class="text-xs text-gray-400 truncate" title={member.performer}>{member.performer}</div>
                      )}
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Episodes Section */}
        <div class="mt-12">
          <div class="lcars-panel">
            <div class="lcars-top-bar flex">
              <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
              <div class="flex-1 h-8 bg-starfleet-blue"></div>
              <div class="w-16 h-8 bg-starfleet-red"></div>
            </div>
            
            <div class="panel-content p-6">
              <h2 class="text-2xl text-starfleet-gold mb-4">Episodes</h2>
              <div class="space-y-8">
                {Object.keys(episodesBySeason).length > 0 ? (
                  // Iterate over pre-processed episodes grouped by season
                  Object.entries(episodesBySeason)
                  .sort(([keyA], [keyB]) => {
                    // Sort numerically, placing "Unknown" last
                    if (keyA === "Unknown") return 1;
                    if (keyB === "Unknown") return -1;
                    return parseInt(keyA) - parseInt(keyB);
                  })
                  .map(([seasonKey, episodes]) => (
                    <div class="season-section">
                      <h3 class="season-header text-xl text-starfleet-gold">
                        {seasonKey === "Unknown" ? "Specials / Unknown Season" : `Season ${seasonKey}`}
                      </h3>
                      <div class="space-y-2">
                        {/* Episodes are already sorted within the season from getStaticPaths */}
                        {episodes.map(episode => (
                            <div class="episode-grid">
                              <span class="episode-number">{episode.episodeNumber ?? "?"}</span>
                              <span class="episode-title">{episode.title || "Unknown Episode"}</span>
                              <span class="episode-date">
                                {episode.usAirDate || episode.airDate // Prefer US air date if available
                                  ? new Date(episode.usAirDate || episode.airDate).toLocaleDateString("en-GB", { // Use GB format D/M/YYYY
                                      year: "numeric",
                                      month: "numeric",
                                      day: "numeric"
                                    })
                                  : "Unknown"}
                              </span>
                              <span class="episode-stardate">{episode.stardateFrom || episode.stardate || "N/A"}</span>
                            </div>
                          ))}
                      </div>
                    </div>
                  ))
                ) : (
                  <p class="text-gray-300">No episodes available.</p>
                )}
              </div>
            </div>
          </div>
        </div>
      </>
    )}
  </div>
</Layout>

<style>
  .series-image {
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  }
  
  .series-meta {
    border-top: 1px solid rgba(0, 178, 255, 0.3);
    padding-top: 1rem;
  }
  
  /* Timeline info styling */
  /* Creates a container for the timeline information with relative positioning for the pattern overlay */
  .timeline-info {
    position: relative;
  }
  
  /* Adds a decorative diagonal striped pattern overlay to the timeline info section */
  /* This creates a subtle LCARS-inspired background pattern */
  .timeline-info::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      45deg,
      rgba(0, 178, 255, 0.05),
      rgba(0, 178, 255, 0.05) 10px,
      rgba(0, 0, 0, 0) 10px,
      rgba(0, 0, 0, 0) 20px
    );
    pointer-events: none; /* Ensures the pattern doesn't interfere with interactions */
  }

  /* Episodes section styling */
  .season-header {
    border-bottom: 2px solid var(--starfleet-gold);
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
  }

  .episode-grid {
    display: grid;
    grid-template-columns: auto 1fr auto auto;
    gap: 1rem;
    align-items: center;
    padding: 0.5rem;
    border-radius: 4px;
  }

  .episode-grid:hover {
    background: rgba(0, 178, 255, 0.1);
  }

  .episode-number {
    font-family: "LCARS", monospace;
    color: var(--starfleet-gold);
    min-width: 3rem;
  }

  .episode-title {
    color: #fff;
  }

  .episode-date {
    color: #888;
    font-size: 0.9rem;
  }

  .episode-stardate {
    color: var(--starfleet-blue);
    font-family: "LCARS", monospace;
  }

  @media (max-width: 768px) {
    .episode-grid {
      grid-template-columns: auto 1fr;
      gap: 0.5rem;
    }

    .episode-date, .episode-stardate {
      grid-column: 2;
      justify-self: start;
    }
  }
</style>

{/* Client-side script removed - all data is fetched at build time */}