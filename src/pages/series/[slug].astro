---
import Layout from '../../layouts/Layout.astro';
import seriesList from '../../data/series.json';
import seriesCharacters from '../../data/series-characters.json';

export const prerender = true;

// Generate all static paths for series slugs
export async function getStaticPaths() {
  return seriesList.map(series => ({
    params: { slug: series.slug }
  }));
}

// Get the current series data and cast for the slug
const { slug } = Astro.params;
let series = seriesList.find(s => s.slug === slug);

// Handle missing series gracefully
const notFound = !series;

// Get cast for this series (may be undefined)
let cast = seriesCharacters[slug] || [];

// --- Hybrid fallback: If episodes or cast are missing, fetch from Netlify function at build time ---
if (series && (!Array.isArray(series.episodes) || series.episodes.length === 0 || cast.length < 5)) {
  try {
    const res = await fetch(`/.netlify/functions/series-detail?slug=${encodeURIComponent(slug)}`);
    if (res.ok) {
      const dynamic = await res.json();
      // Merge in episodes if missing or incomplete
      if (Array.isArray(dynamic.episodes) && dynamic.episodes.length > 0) {
        series = { ...series, episodes: dynamic.episodes };
      }
      // Merge in cast if missing or incomplete
      if (Array.isArray(dynamic.cast) && dynamic.cast.length > 0) {
        cast = dynamic.cast;
      }
      // Prefer best available description/timeline
      if (dynamic.wikiSummary && (!series.wikiSummary || series.wikiSummary.length < 40)) {
        series = { ...series, wikiSummary: dynamic.wikiSummary };
      }
      if (dynamic.description && (!series.description || series.description.length < 40)) {
        series = { ...series, description: dynamic.description };
      }
    }
  } catch (err) {
    // Fallback failed, do nothing
  }
}

// JSON-LD schema for SEO
const seriesSchema = series
  ? {
      "@context": "https://schema.org",
      "@type": "TVSeries",
      "name": series.title,
      "alternateName": series.abbreviation || "",
      "description": series.wikiSummary || series.description || "",
      "url": series.wikiUrl || "",
      "image": series.wikiImage || series.image || "/images/stars-placeholder.jpg",
      "temporalCoverage": series.stardate || "",
      "numberOfEpisodes": series.episodesCount || "?",
      "numberOfSeasons": series.seasonsCount || "?",
      "productionCompany": typeof series.productionCompany === "object"
        ? series.productionCompany?.name || "Paramount"
        : series.productionCompany || "Paramount",
      "countryOfOrigin": "United States",
      "inLanguage": "English"
    }
  : null;
---
<Layout
  title={notFound ? "Series Not Found" : series.title}
  description={notFound ? "No series found for this slug." : (series.wikiSummary || series.description || "Learn about a Star Trek series.")}
  schemaData={seriesSchema}
>
  <div class="container mx-auto px-4 py-12">
    {notFound ? (
      <div class="text-center text-red-500 text-2xl py-24">
        <h1>Series Not Found</h1>
        <p>Sorry, we couldn't find a series for this URL.</p>
        <a href="/series/" class="text-starfleet-gold hover:underline mt-4 inline-block">Back to Series List</a>
      </div>
    ) : (
      <>
        {/* Main content container */}
        <div class="lcars-header mb-8">
          <div class="lcars-header-content">
            <h1 class="text-3xl">{series.title}</h1>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div class="md:col-span-1">
            <div class="lcars-panel">
              <div class="lcars-top-bar flex">
                <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
                <div class="flex-1 h-8 bg-starfleet-blue"></div>
              </div>
              
              <div class="panel-content p-6">
                <div class="series-image aspect-video overflow-hidden mb-4">
                  <img
                    src={series.wikiImage || series.image || "/images/stars-placeholder.jpg"}
                    alt={series.title}
                    class="w-full h-full object-cover"
                    on:error={(e) => { e.target.src = "/images/stars-placeholder.jpg"; }}
                  />
                </div>
                
                <div class="series-meta space-y-2 mt-6">
                  <div class="flex justify-between">
                    <span class="text-gray-400">Abbreviation:</span>
                    <span class="text-white">{series.abbreviation || "N/A"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Air Date:</span>
                    <span class="text-white">{series.years || "Unknown"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Stardate:</span>
                    <span class="text-white">{series.stardate || "Unknown"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Seasons:</span>
                    <span class="text-white">{series.seasonsCount ?? "?"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Episodes:</span>
                    <span class="text-white">{series.episodesCount ?? "?"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Network:</span>
                    <span class="text-white">{series.originalBroadcaster?.name || "Various"}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Production:</span>
                    <span class="text-white">
                      {typeof series.productionCompany === "object"
                        ? series.productionCompany?.name || "Paramount"
                        : series.productionCompany || "Paramount"}
                    </span>
                  </div>
                </div>
                
                {series.wikiUrl && (
                  <a href={series.wikiUrl} target="_blank" rel="noopener noreferrer" class="text-starfleet-gold hover:underline inline-flex items-center mt-4">
                    View on Memory Alpha <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-1"><path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"></path><path d="M15 3h6v6"></path><path d="M10 14L21 3"></path></svg>
                  </a>
                )}
              </div>
            </div>
          </div>
          
          <div class="md:col-span-2">
            <div class="lcars-panel">
              <div class="lcars-top-bar flex">
                <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
                <div class="flex-1 h-8 bg-starfleet-blue"></div>
                <div class="w-16 h-8 bg-starfleet-red"></div>
              </div>
              
              <div class="panel-content p-6">
                <h2 class="text-2xl text-starfleet-gold mb-4">Series Overview</h2>
                
                <div class="series-description text-gray-300 mb-6 space-y-4">
                  <p innerHTML={series.wikiSummary || series.description || `${series.title} is a Star Trek series that aired from ${series.years || "Unknown"}.`}></p>
                </div>
                
                {/* Timeline Placement Section */}
                <h3 class="text-xl text-starfleet-gold mb-3">Timeline Placement</h3>
                <div class="timeline-info bg-space-black bg-opacity-50 p-4 border-l-4 border-starfleet-blue mb-6">
                  <p class="text-gray-300">
                    {series.title} is set
                    {series.stardate && series.stardate !== "Unknown" ? ` in the years ${series.stardate}, ` : " "}
                    {(() => {
                      if (series.title.includes("Original")) return "during the Five-Year Mission.";
                      if (series.title.includes("Next Generation")) return "during the 24th century.";
                      if (series.title.includes("Deep Space Nine")) return "during the Dominion War era.";
                      if (series.title.includes("Voyager")) return "during the Delta Quadrant expedition.";
                      if (series.title.includes("Enterprise")) return "in the early days of Starfleet.";
                      if (series.title.includes("Picard")) return "in the post-Dominion War era.";
                      return "in the Star Trek timeline.";
                    })()}
                  </p>
                </div>
                
                <div class="mt-8">
                  <a href="/series/" class="inline-flex items-center text-starfleet-gold hover:underline">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M19 12H5M12 19l-7-7 7-7"/></svg>
                    Back to Series
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Cast Section */}
        <div class="mt-12">
          <div class="lcars-panel">
            <div class="lcars-top-bar flex">
              <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
              <div class="flex-1 h-8 bg-starfleet-blue"></div>
              <div class="w-16 h-8 bg-starfleet-red"></div>
            </div>
            
            <div class="panel-content p-6">
              <h2 class="text-2xl text-starfleet-gold mb-4">Cast</h2>
              <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                {cast.length === 0 ? (
                  <p class="text-gray-300 col-span-full">No cast information available.</p>
                ) : (
                  cast.map(member => (
                    <div class="cast-member text-center" style="min-width:0">
                      <div class="aspect-square overflow-hidden rounded-lg mb-2">
                        <img
                          src={member.image || "/images/generic-character.jpg"}
                          alt={member.name}
                          class="w-full h-full object-cover"
                          on:error={(e) => { e.target.src = "/images/generic-character.jpg"; }}
                        />
                      </div>
                      <a href={member.url} target="_blank" rel="noopener noreferrer" class="text-starfleet-gold hover:underline text-sm">
                        {member.name}
                      </a>
                      {member.performer && (
                        <div class="text-xs text-gray-400">{member.performer}</div>
                      )}
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Episodes Section */}
        <div class="mt-12">
          <div class="lcars-panel">
            <div class="lcars-top-bar flex">
              <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
              <div class="flex-1 h-8 bg-starfleet-blue"></div>
              <div class="w-16 h-8 bg-starfleet-red"></div>
            </div>
            
            <div class="panel-content p-6">
              <h2 class="text-2xl text-starfleet-gold mb-4">Episodes</h2>
              <div class="space-y-8">
                {Array.isArray(series.episodes) && series.episodes.length > 0 ? (
                  // Group episodes by season
                  Object.entries(
                    series.episodes.reduce((acc, ep) => {
                      const season = ep.season ?? "Unknown";
                      const key = typeof season === "object"
                        ? season.title || season.name || season.number || JSON.stringify(season)
                        : String(season);
                      if (!acc[key]) acc[key] = [];
                      acc[key].push(ep);
                      return acc;
                    }, {})
                  )
                  .sort(([a], [b]) => {
                    if (a === "Unknown") return 1;
                    if (b === "Unknown") return -1;
                    return parseInt(a) - parseInt(b);
                  })
                  .map(([season, episodes]) => (
                    <div class="season-section">
                      <h3 class="season-header text-xl text-starfleet-gold">Season {season}</h3>
                      <div class="space-y-2">
                        {episodes
                          .sort((a, b) => (a.episodeNumber ?? 0) - (b.episodeNumber ?? 0))
                          .map(episode => (
                            <div class="episode-grid">
                              <span class="episode-number">{episode.episodeNumber ?? "?"}</span>
                              <span class="episode-title">{episode.title || "Unknown Episode"}</span>
                              <span class="episode-date">
                                {episode.airDate
                                  ? new Date(episode.airDate).toLocaleDateString("en-US", {
                                      year: "numeric",
                                      month: "long",
                                      day: "numeric"
                                    })
                                  : "Unknown"}
                              </span>
                              <span class="episode-stardate">{episode.stardate || "Unknown"}</span>
                            </div>
                          ))}
                      </div>
                    </div>
                  ))
                ) : (
                  <p class="text-gray-300">No episodes available.</p>
                )}
              </div>
            </div>
          </div>
        </div>
      </>
    )}
  </div>
</Layout>

<style>
  .series-image {
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  }
  
  .series-meta {
    border-top: 1px solid rgba(0, 178, 255, 0.3);
    padding-top: 1rem;
  }
  
  /* Timeline info styling */
  /* Creates a container for the timeline information with relative positioning for the pattern overlay */
  .timeline-info {
    position: relative;
  }
  
  /* Adds a decorative diagonal striped pattern overlay to the timeline info section */
  /* This creates a subtle LCARS-inspired background pattern */
  .timeline-info::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      45deg,
      rgba(0, 178, 255, 0.05),
      rgba(0, 178, 255, 0.05) 10px,
      rgba(0, 0, 0, 0) 10px,
      rgba(0, 0, 0, 0) 20px
    );
    pointer-events: none; /* Ensures the pattern doesn't interfere with interactions */
  }

  /* Episodes section styling */
  .season-header {
    border-bottom: 2px solid var(--starfleet-gold);
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
  }

  .episode-grid {
    display: grid;
    grid-template-columns: auto 1fr auto auto;
    gap: 1rem;
    align-items: center;
    padding: 0.5rem;
    border-radius: 4px;
  }

  .episode-grid:hover {
    background: rgba(0, 178, 255, 0.1);
  }

  .episode-number {
    font-family: "LCARS", monospace;
    color: var(--starfleet-gold);
    min-width: 3rem;
  }

  .episode-title {
    color: #fff;
  }

  .episode-date {
    color: #888;
    font-size: 0.9rem;
  }

  .episode-stardate {
    color: var(--starfleet-blue);
    font-family: "LCARS", monospace;
  }

  @media (max-width: 768px) {
    .episode-grid {
      grid-template-columns: auto 1fr;
      gap: 0.5rem;
    }

    .episode-date, .episode-stardate {
      grid-column: 2;
      justify-self: start;
    }
  }
</style>

<!-- All client-side scripts and fetches removed: content is now fully server-rendered. -->