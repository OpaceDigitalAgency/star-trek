---
import Layout from '../../layouts/Layout.astro';
import { slugify } from '../../utils/slugify.js'; // Keep slugify if needed elsewhere or for client-side logic

export const prerender = false;

export async function get({ params }) {
  // This function is needed for server-side rendering
  // The actual data fetching happens client-side in the script
  return {
    props: {}
  };
}

// Create JSON-LD schema for series page (will be updated client-side)
const seriesSchema = {
  "@context": "https://schema.org",
  "@type": "TVSeries",
  "name": "Loading...", // Placeholder
  "alternateName": "", // Placeholder
  "description": "Loading series information...", // Placeholder
  "url": "", // Placeholder
  "image": "/images/stars-placeholder.jpg", // Placeholder
  "temporalCoverage": "", // Placeholder
  "numberOfEpisodes": "?", // Placeholder
  "numberOfSeasons": "?", // Placeholder
  "productionCompany": "", // Placeholder
  "countryOfOrigin": "United States",
  "inLanguage": "English"
};
// Create structured data for the series page
---
<Layout
  title="Star Trek Series Profile"
  description="Learn about a Star Trek series."
  schemaData={seriesSchema}
>
  <div class="container mx-auto px-4 py-12">
    <!-- Main content container -->
    <div class="lcars-header mb-8">
      <div class="lcars-header-content">
        <h1 id="series-title" class="text-3xl">Loading...</h1>
      </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
      <div class="md:col-span-1">
        <div class="lcars-panel">
          <div class="lcars-top-bar flex">
            <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
            <div class="flex-1 h-8 bg-starfleet-blue"></div>
          </div>
          
          <div class="panel-content p-6">
            <div class="series-image aspect-video overflow-hidden mb-4">
              <img
                id="series-image"
                src="/images/stars-placeholder.jpg"
                alt="Loading series image"
                class="w-full h-full object-cover"
                onerror="this.onerror=null; this.src='/images/stars-placeholder.jpg';"
              />
            </div>
            
            <div class="series-meta space-y-2 mt-6">
              <div class="flex justify-between">
                <span class="text-gray-400">Abbreviation:</span>
                <span id="series-abbreviation" class="text-white">Loading...</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Air Date:</span>
                <span id="series-years" class="text-white">Loading...</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Stardate:</span>
                <span id="series-stardate" class="text-white">Loading...</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Seasons:</span>
                <span id="series-seasons" class="text-white">Loading...</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Episodes:</span>
                <span id="series-episodes" class="text-white">Loading...</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Network:</span>
                <span id="series-network" class="text-white">Loading...</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Production:</span>
                <span id="series-production" class="text-white">Loading...</span>
              </div>
            </div>
            
            <a id="series-wiki-link" href="#" target="_blank" rel="noopener noreferrer" class="text-starfleet-gold hover:underline inline-flex items-center mt-4 hidden">
              View on Memory Alpha <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-1"><path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"></path><path d="M15 3h6v6"></path><path d="M10 14L21 3"></path></svg>
            </a>
          </div>
        </div>
      </div>
      
      <div class="md:col-span-2">
        <div class="lcars-panel">
          <div class="lcars-top-bar flex">
            <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
            <div class="flex-1 h-8 bg-starfleet-blue"></div>
            <div class="w-16 h-8 bg-starfleet-red"></div>
          </div>
          
          <div class="panel-content p-6">
            <h2 class="text-2xl text-starfleet-gold mb-4">Series Overview</h2>
            
            <div id="series-description" class="series-description text-gray-300 mb-6 space-y-4">
              <p>Loading series description...</p>
            </div>
            
            <!-- Timeline Placement Section -->
            <!-- This section displays where the series fits in the Star Trek chronology -->
            <h3 class="text-xl text-starfleet-gold mb-3">Timeline Placement</h3>
            <div class="timeline-info bg-space-black bg-opacity-50 p-4 border-l-4 border-starfleet-blue mb-6">
              <p id="series-timeline-info" class="text-gray-300">
                Loading timeline information...
              </p>
            </div>
            
            <div class="mt-8">
              <a href="/series/" class="inline-flex items-center text-starfleet-gold hover:underline">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M19 12H5M12 19l-7-7 7-7"/></svg>
                Back to Series
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .series-image {
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  }
  
  .series-meta {
    border-top: 1px solid rgba(0, 178, 255, 0.3);
    padding-top: 1rem;
  }
  
  /* Timeline info styling */
  /* Creates a container for the timeline information with relative positioning for the pattern overlay */
  .timeline-info {
    position: relative;
  }
  
  /* Adds a decorative diagonal striped pattern overlay to the timeline info section */
  /* This creates a subtle LCARS-inspired background pattern */
  .timeline-info::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      45deg,
      rgba(0, 178, 255, 0.05),
      rgba(0, 178, 255, 0.05) 10px,
      rgba(0, 0, 0, 0) 10px,
      rgba(0, 0, 0, 0) 20px
    );
    pointer-events: none; /* Ensures the pattern doesn't interfere with interactions */
  }
</style>

<script is:load>
  // Client-side script to fetch and display series data
  async function fetchSeriesData() {
    // Handle URLs with or without trailing slashes
    const path = window.location.pathname.endsWith('/')
      ? window.location.pathname.slice(0, -1) // Remove trailing slash
      : window.location.pathname;
    
    const pathParts = path.split('/').filter(Boolean);
    const slug = pathParts[pathParts.length - 1];
    
    console.log(`Fetching series data for slug: ${slug} from path: ${path}`);
    
    if (!slug || slug === 'series') {
      console.error("Invalid slug found in URL:", slug);
      // Only redirect if we're not already on the series index page
      if (window.location.pathname !== '/series/' && window.location.pathname !== '/series') {
        window.location.href = '/series/';
      }
      return;
    }

    try {
      console.log(`Making request to: /api/series/${slug}`);
      const response = await fetch(`/api/series/${slug}`);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`HTTP error! status: ${response.status}, response:`, errorText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const series = await response.json();
      console.log("Series data received:", series);

      // Update DOM with series data
      document.getElementById('series-title').textContent = series.title;
      document.getElementById('series-image').src = series.wikiImage || series.image || "/images/stars-placeholder.jpg";
      document.getElementById('series-image').alt = series.title;
      document.getElementById('series-abbreviation').textContent = series.abbreviation || "N/A";
      document.getElementById('series-years').textContent = series.years;
      document.getElementById('series-stardate').textContent = series.stardate;
      document.getElementById('series-seasons').textContent = series.seasons || series.seasonsCount || "?";
      document.getElementById('series-episodes').textContent = series.episodes || series.episodesCount || "?";
      document.getElementById('series-network').textContent = series.originalNetwork || "Various";
      document.getElementById('series-production').textContent = series.productionCompany || "Paramount";
      document.getElementById('series-description').innerHTML = series.wikiSummary || series.description || `${series.title} is a Star Trek series that aired from ${series.years}.`;

      // Update timeline info
      let timelineText = `${series.title} is set in the years ${series.stardate}, `;
      if (series.title.includes("Discovery") && series.stardate.includes("3188")) {
        timelineText += "initially during the 2250s before the crew time-traveled to the 32nd century."
      } else {
        const era = series.title.includes("Original") ? "Five-Year Mission" :
                    series.title.includes("Next Generation") ? "24th century" :
                    series.title.includes("Deep Space Nine") ? "Dominion War era" :
                    series.title.includes("Voyager") ? "Delta Quadrant expedition" :
                    series.title.includes("Enterprise") ? "early days of Starfleet" :
                    series.title.includes("Picard") ? "post-Dominion War era" :
                    "Star Trek timeline";
        timelineText += `during the ${era}.`;
      }
      document.getElementById('series-timeline-info').textContent = timelineText;

      // Update wiki link
      const wikiLink = document.getElementById('series-wiki-link');
      if (series.wikiUrl) {
        wikiLink.href = series.wikiUrl;
        wikiLink.classList.remove('hidden');
      } else {
        wikiLink.classList.add('hidden');
      }

      // Update page title and description in the Layout component (requires accessing Astro.props or similar if possible, or updating meta tags directly)
      // For now, the Layout title and description will remain placeholders set in the frontmatter.
      // A more robust solution might involve a client-side framework component or updating meta tags with JavaScript.

    } catch (error) {
      console.error("Failed to fetch series data:", error);
      
      // Create a more detailed error message for debugging
      const errorDetails = `
        Error: ${error.message}
        URL: ${window.location.href}
        Slug: ${slug}
        Time: ${new Date().toISOString()}
      `;
      console.error(errorDetails);
      
      // Display error message to the user
      document.getElementById('series-title').textContent = "Error loading series data";
      document.getElementById('series-description').innerHTML = `
        <p>Could not load series information. Please try again later.</p>
        <p class="text-sm text-red-500 mt-2">Error: ${error.message}</p>
        <p class="text-sm mt-4">If this problem persists, please try returning to the <a href="/series/" class="text-starfleet-gold hover:underline">series list</a> and selecting the series again.</p>
      `;
      
      // Hide other elements or show a specific error state
      document.getElementById('series-image').classList.add('hidden');
      document.querySelector('.series-meta').classList.add('hidden');
      document.querySelector('.timeline-info').classList.add('hidden');
      document.getElementById('series-wiki-link').classList.add('hidden');
    }
  }

  fetchSeriesData();
</script>