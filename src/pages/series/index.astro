---
import Layout from '../../layouts/Layout.astro';
import seriesData from '../../data/series.json';

const PAGE_SIZE = 12;  // Number of series to display per page
let totalPages = Math.ceil(seriesData.length / PAGE_SIZE);
let totalSeries = seriesData.length;

export const prerender = true;
export const staticSeries = seriesData.slice(0, PAGE_SIZE);
export let initialSeries = staticSeries;

export const initialState = {
  series: staticSeries,
  totalSeries,
  totalPages,
  pageSize: PAGE_SIZE
};

import { stapiService, extractYears, extractStardateYears } from '../../services/stapiService';
import ProgressiveImage from '../../components/ProgressiveImage.js';
import { slugify } from '../../utils/slugify.js';

// Make sure the ProgressiveImage component is available in the client
const progressiveImageScript = `
  // Use a regular script approach instead of import
  if (!customElements.get('progressive-image')) {
    class ProgressiveImage extends HTMLElement {
      constructor() {
        super();
        this._src = '';
        this._fallback = '';
        this._alt = '';
        this._loading = true;
        this._error = false;
      }

      static get observedAttributes() {
        return ['src', 'fallback', 'alt'];
      }

      attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue !== newValue) {
          this['_' + name] = newValue;
          if (name === 'src') {
            this.loadImage();
          }
        }
      }

      connectedCallback() {
        this._src = this.getAttribute('src') || '';
        this._fallback = this.getAttribute('fallback') || '/images/stars-placeholder.jpg';
        this._alt = this.getAttribute('alt') || '';
        this.loadImage();
      }

      loadImage() {
        this._loading = true;
        this._error = false;
        this.render();

        if (!this._src) {
          this._error = true;
          this._loading = false;
          this.render();
          return;
        }

        const img = new Image();
        img.src = this._src;
        img.onload = () => {
          this._loading = false;
          this._error = false;
          this.render();
        };
        img.onerror = () => {
          console.warn(\`Failed to load image: \${this._src}, falling back to: \${this._fallback}\`);
          this._loading = false;
          this._error = true;
          this.render();

          // Try to load the fallback image
          if (this._fallback && this._fallback !== this._src) {
            const fallbackImg = new Image();
            fallbackImg.src = this._fallback;
          }
        };
      }

      render() {
        if (this._loading) {
          this.innerHTML = \`
            <div class="skeleton-loader w-full h-full bg-gray-800 animate-pulse rounded"></div>
          \`;
        } else if (this._error) {
          this.innerHTML = \`
            <img src="\${this._fallback}" alt="\${this._alt}" class="w-full h-full object-cover" />
          \`;
        } else {
          this.innerHTML = \`
            <img src="\${this._src}" alt="\${this._alt}" class="w-full h-full object-cover" />
          \`;
        }
      }
    }

    customElements.define('progressive-image', ProgressiveImage);
  }
`;

// SEO metadata for pagination
const currentPage = 1; // Initial page is always 1 for SSR
const canonicalURL = new URL(Astro.url.pathname, Astro.site).href;

// Make sure the ProgressiveImage component is available in the client

// Import the local series data at the top level
let seriesLocalJson = [];
try {
  // Try to import the local series data
  seriesLocalJson = await import('../../data/series.json').then(m => m.default);
} catch (error) {
  console.error('Failed to import local series data:', error);
  // Will fall back to STAPI API below
}

// Fetch only the first page of series for the initial build
try {
  // Use local series data directly for the initial build if available
  if (seriesLocalJson && seriesLocalJson.length > 0) {
    import.meta.env.SSR && console.log('Using local series data for initial build');

    // Get the first page of series
    initialSeries = seriesLocalJson.slice(0, PAGE_SIZE);
    totalPages = Math.ceil(seriesLocalJson.length / PAGE_SIZE);
    totalSeries = seriesLocalJson.length;
  } else {
    // Fallback to STAPI API if local data is not available
    import.meta.env.SSR && console.log('Local series data not available, fetching from STAPI');

    // Fetch all series from STAPI
    let allSeries = await stapiService.getSeries();

    // Filter out irrelevant entries and ensure we have the main series
    const mainSeries = ["Star Trek", "Star Trek: The Next Generation", "Star Trek: Deep Space Nine",
                        "Star Trek: Voyager", "Star Trek: Enterprise", "Star Trek: Discovery",
                        "Star Trek: Picard", "Star Trek: The Animated Series"];

    allSeries = allSeries.filter(series => mainSeries.includes(series.title));

    // If STAPI fails or returns insufficient data, use fallback
    if (allSeries.length < 5) {
      allSeries = [
        {
          title: "Star Trek: The Original Series",
          uid: "SRMA0000001", // Made-up UID
          abbreviation: "TOS",
          productionStartYear: 1966,
          productionEndYear: 1969,
          seasonsCount: 3,
          episodesCount: 79,
          originalNetwork: "NBC",
          productionCompany: "Desilu Productions"
        },
        {
          title: "Star Trek: The Animated Series",
          uid: "SRMA0000002", // Made-up UID
          abbreviation: "TAS",
          productionStartYear: 1973,
          productionEndYear: 1974,
          seasonsCount: 2,
          episodesCount: 22,
          originalNetwork: "NBC",
          productionCompany: "Filmation"
        },
        {
          title: "Star Trek: The Next Generation",
          uid: "SRMA0000003", // Made-up UID
          abbreviation: "TNG",
          productionStartYear: 1987,
          productionEndYear: 1994,
          seasonsCount: 7,
          episodesCount: 178,
          originalNetwork: "Syndication",
          productionCompany: "Paramount Television"
        },
        {
          title: "Star Trek: Deep Space Nine",
          uid: "SRMA0000004", // Made-up UID
          abbreviation: "DS9",
          productionStartYear: 1993,
          productionEndYear: 1999,
          seasonsCount: 7,
          episodesCount: 176,
          originalNetwork: "Syndication",
          productionCompany: "Paramount Television"
        },
        {
          title: "Star Trek: Voyager",
          uid: "SRMA0000005", // Made-up UID
          abbreviation: "VOY",
          productionStartYear: 1995,
          productionEndYear: 2001,
          seasonsCount: 7,
          episodesCount: 172,
          originalNetwork: "UPN",
          productionCompany: "Paramount Television"
        },
        {
          title: "Star Trek: Enterprise",
          uid: "SRMA0000006", // Made-up UID
          abbreviation: "ENT",
          productionStartYear: 2001,
          productionEndYear: 2005,
          seasonsCount: 4,
          episodesCount: 98,
          originalNetwork: "UPN",
          productionCompany: "Paramount Television"
        },
        {
          title: "Star Trek: Discovery",
          uid: "SRMA0000007", // Made-up UID
          abbreviation: "DISC",
          productionStartYear: 2017,
          productionEndYear: 2024,
          seasonsCount: 5,
          episodesCount: 65,
          originalNetwork: "CBS All Access/Paramount+",
          productionCompany: "CBS Studios"
        },
        {
          title: "Star Trek: Picard",
          uid: "SRMA0000008", // Made-up UID
          abbreviation: "PIC",
          productionStartYear: 2020,
          productionEndYear: 2023,
          seasonsCount: 3,
          episodesCount: 30,
          originalNetwork: "CBS All Access/Paramount+",
          productionCompany: "CBS Studios"
        }
      ];
    }

    // Map STAPI data to our format
    allSeries = allSeries.map(series => ({
      ...series,
      years: extractYears(series),
      stardate: extractStardateYears(series),
      image: stapiService.getImageUrl(series.title, 'series'),
      slug: slugify(series.title)
    }));

    // Enhance with Memory Alpha data for each series
    for (let i = 0; i < allSeries.length; i++) {
      try {
        const series = allSeries[i];
        const wikiTitle = series.title.replace('Star Trek: ', '');
        const wikiData = await stapiService.getMemoryAlphaContent(wikiTitle);

        if (wikiData.image) {
          series.wikiImage = wikiData.image;
        }
        if (wikiData.summary) {
          series.wikiSummary = wikiData.summary;
        }
        series.wikiUrl = wikiData.wikiUrl;
      } catch (error) {
        console.error(`Error fetching Memory Alpha data for series:`, error);
      }
    }

    // Sort series by in-universe chronology (stardate or years)
    allSeries.sort((a, b) => {
      // Extract years from stardate or production years
      const aYear = parseInt(a.stardate?.split('-')?.[0] || a.productionStartYear || 0);
      const bYear = parseInt(b.stardate?.split('-')?.[0] || b.productionStartYear || 0);
      return aYear - bYear;
    });

    initialSeries = allSeries.slice(0, PAGE_SIZE);
    totalPages = Math.ceil(allSeries.length / PAGE_SIZE);
    totalSeries = allSeries.length;
  }

  console.log(`Initial build: Fetched ${initialSeries.length} series. Total series: ${totalSeries}, Total pages: ${totalPages}.`);
  console.log('[series/index.astro] Series slugs for cards:', initialSeries.map(s => s.slug || s.uid || s.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '')));

} catch (error) {
  console.error('Error fetching initial series data:', error);
  // Add fallback data if needed
  initialSeries = [ /* Add fallback series objects here if API fails */ ];
  totalSeries = initialSeries.length;
  totalPages = 1;
}

// Extract production companies and networks for filter dropdowns
const productionCompanies = [...new Set(initialSeries
  .map(s => {
    if (!s.productionCompany) return null;
    return typeof s.productionCompany === 'object' && s.productionCompany.name
      ? s.productionCompany.name
      : s.productionCompany;
  })
  .filter(Boolean)
)].sort();

const networks = [...new Set(initialSeries
  .map(s => {
    if (!s.originalNetwork) return null;
    return typeof s.originalNetwork === 'object' && s.originalNetwork.name
      ? s.originalNetwork.name
      : s.originalNetwork;
  })
  .filter(Boolean)
)].sort();

// Extract decades for filter dropdown
const decades = [...new Set(initialSeries
  .map(s => s.productionStartYear ? Math.floor(s.productionStartYear / 10) * 10 : null)
  .filter(Boolean)
)].sort();

// Create JSON-LD schema for the series list page
const seriesListSchema = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "Star Trek Series | Complete Guide to All Star Trek TV Shows",
  "description": "Explore all Star Trek series from The Original Series to Discovery, Picard and beyond. Get episode guides, character information, and timeline placement.",
  "url": "https://star-trek-timelines.netlify.app/series/",
  "isPartOf": {
    "@type": "WebSite",
    "name": "Star Trek Timelines",
    "url": "https://star-trek-timelines.netlify.app/"
  },
  "about": {
    "@type": "CreativeWorkSeries",
    "name": "Star Trek",
    "description": "Science fiction media franchise created by Gene Roddenberry"
  },
  "hasPart": initialSeries.map(series => ({
    "@type": "TVSeries",
    "name": series.title,
    "alternateName": series.abbreviation,
    "url": `https://star-trek-timelines.netlify.app/series/${series.slug}/`,
    "temporalCoverage": series.years,
    "numberOfEpisodes": series.episodes || series.episodesCount,
    "numberOfSeasons": series.seasons || series.seasonsCount
  }))
};
---

<Layout
  title="Star Trek Series | Complete Guide to All Star Trek TV Shows"
  description="Explore all Star Trek series from The Original Series to Discovery, Picard and beyond. Get episode guides, character information, and timeline placement."
  schemaData={seriesListSchema}
>
  <script is:inline set:html={progressiveImageScript}></script>

  <!-- TEMP: ARIA live region for dynamic updates -->
  <div id="aria-live-region" aria-live="polite" class="sr-only" style="position:absolute;left:-9999px;top:auto;width:1px;height:1px;overflow:hidden;">
    Timeline updated.
  </div>
  <div class="container mx-auto px-4 py-12">
      <div class="debug-panel bg-space-black text-starfleet-gold p-4 mb-6 rounded-lg border border-starfleet-gold">
        <div><strong>DEBUG:</strong></div>
        <div>Slugs for all series cards: <span class="text-console-green">{initialSeries.map(s => s.slug || s.uid || s.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '')).join(", ")}</span></div>
      </div>
      <div class="lcars-header mb-8">
        <div class="lcars-header-content">
          <h1 class="text-3xl">Federation Database: Star Trek Series</h1>
        </div>
      </div>

      <div class="lcars-panel mb-12">
        <div class="lcars-top-bar flex">
          <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
          <div class="flex-1 h-8 bg-starfleet-blue"></div>
          <div class="w-16 h-8 bg-starfleet-red"></div>
        </div>

        <div class="panel-content p-6 bg-space-black bg-opacity-90 border-x border-b border-starfleet-blue rounded-b-lg">
          <p class="text-gray-300 mb-6">
            Accessing Federation archives... Displaying all Star Trek television series spanning from the 1960s to today.
            Each series expands the rich tapestry of the Star Trek universe, introducing new characters,
            technologies, and interstellar civilizations.
          </p>

        <div class="filters mb-8">
          <div class="flex flex-wrap gap-6">
            <!-- Production Company Filter -->
            {productionCompanies.length > 0 && (
              <div class="filter-group">
                <h3 class="text-white text-lg mb-3 filter-label">Production Company</h3>
                <div class="relative filter-select-wrapper">
                  <select
                    id="company-filter"
                    class="appearance-none bg-space-black text-white p-3 pr-10 border-2 border-starfleet-blue rounded-lg relative min-w-[200px] shadow-lg filter-select"
                  >
                    <option value="all">All Companies</option>
                    {productionCompanies.map(company => (
                      <option value={company}>{company}</option>
                    ))}
                  </select>
                  <!-- Enhanced chevron with glow effect -->
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 filter-chevron">
                    <svg class="h-5 w-5 fill-starfleet-gold filter drop-shadow-lg"
                        viewBox="0 0 20 20"><path d="M5 7l5 5 5-5H5z"/></svg>
                  </div>
                </div>
              </div>
            )}

            <!-- Network Filter -->
            {networks.length > 0 && (
              <div class="filter-group">
                <h3 class="text-white text-lg mb-3 filter-label">Original Network</h3>
                <div class="relative filter-select-wrapper">
                  <select
                    id="network-filter"
                    class="appearance-none bg-space-black text-white p-3 pr-10 border-2 border-starfleet-blue rounded-lg relative min-w-[200px] shadow-lg filter-select"
                  >
                    <option value="all">All Networks</option>
                    {networks.map(network => (
                      <option value={network}>{network}</option>
                    ))}
                  </select>
                  <!-- Enhanced chevron with glow effect -->
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 filter-chevron">
                    <svg class="h-5 w-5 fill-starfleet-gold filter drop-shadow-lg"
                        viewBox="0 0 20 20"><path d="M5 7l5 5 5-5H5z"/></svg>
                  </div>
                </div>
              </div>
            )}

            <!-- Decade Filter -->
            {decades.length > 0 && (
              <div class="filter-group">
                <h3 class="text-white text-lg mb-3 filter-label">Decade</h3>
                <div class="relative filter-select-wrapper">
                  <select
                    id="decade-filter"
                    class="appearance-none bg-space-black text-white p-3 pr-10 border-2 border-starfleet-blue rounded-lg relative min-w-[150px] shadow-lg filter-select"
                  >
                    <option value="all">All Decades</option>
                    {decades.map(decade => (
                      <option value={decade}>{decade}s</option>
                    ))}
                  </select>
                  <!-- Enhanced chevron with glow effect -->
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 filter-chevron">
                    <svg class="h-5 w-5 fill-starfleet-gold filter drop-shadow-lg"
                        viewBox="0 0 20 20"><path d="M5 7l5 5 5-5H5z"/></svg>
                  </div>
                </div>
              </div>
            )}

            <!-- View Toggle -->
            <div class="filter-group ml-4">
              <h3 class="text-white text-lg mb-3 filter-label">Timeline View</h3>
              <div class="flex gap-4 view-toggle-container">
                <button id="view-chronology" class="trek-button active">In-Universe</button>
                <button id="view-release" class="trek-button">Release Order</button>
              </div>
            </div>

            <!-- Search -->
            <div class="filter-group ml-auto">
              <h3 class="text-white text-lg mb-3 filter-label">Search</h3>
              <div class="relative search-container">
                <input
                  type="text"
                  id="search-input"
                  placeholder="Search series..."
                  class="appearance-none bg-space-black border-2 border-starfleet-blue text-white p-3 pl-10 rounded-lg min-w-[250px] shadow-lg focus:border-starfleet-gold focus:outline-none transition-all duration-300"
                >
                <div class="absolute inset-y-0 left-0 flex items-center pl-3">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-starfleet-blue" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Series container with enhanced timeline style -->
    <div class="timeline-container" id="series-container" aria-label="Star Trek Series Timeline" role="list">
      <!-- Timeline legend -->
      <div class="timeline-legend">
        <div class="legend-item">
          <span class="legend-dot in-universe"></span>
          <span class="legend-text">In-Universe Timeline</span>
        </div>
        <div class="legend-item">
          <span class="legend-dot release-order"></span>
          <span class="legend-text">Release Timeline</span>
        </div>
      </div>
      <!-- Central timeline line is handled by CSS ::before -->

      {initialSeries.map((series, idx) => {
        // Determine left/right alignment
        const alignment = idx % 2 === 0 ? 'left' : 'right';
        // Use wikiImage, image, or fallback
        const imageUrl = series.wikiImage || series.image || '/images/stars-placeholder.jpg';
        // Slug for link
        const slug = series.slug || series.uid || slugify(series.title);
        // Dates
        const stardate = series.stardate || '';
        const years = series.years || '';
        // Abbreviation
        const abbr = series.abbreviation || "ST";
        // Wiki summary
        const summary = series.wikiSummary ? series.wikiSummary.replace(/<[^>]*>/g, '').substring(0, 150) + '...' : (series.description || `Star Trek series that aired on ${series.originalNetwork || "television"}.`);
        // Memory Alpha link
        const wikiUrl = series.wikiUrl;
        // Seasons
        const seasons = series.seasons || series.seasonsCount || "?";
        // Primary/secondary date for badge
        const primaryDate = stardate || years || "Unknown";
        const secondaryDate = years || stardate || "Unknown";
        // Colors
        const primaryColor = 'starfleet-blue';
        const secondaryColor = 'console-green';

        return (
          <div class={`timeline-row ${alignment} relative`} key={series.uid || series.slug || idx} role="listitem" tabindex="-1">
            {/* Timeline node */}
            <div class="timeline-node absolute left-1/2 transform -translate-x-1/2" aria-hidden="true"></div>
            {/* Connector */}
            <div class={`connector absolute top-16 ${alignment === 'left' ? 'right-0' : 'left-0'} w-12 h-0.5 bg-starfleet-gold transform -translate-y-1/2`} aria-hidden="true"></div>
            {/* Card */}
            <a href={`/series/${slug}/`} class="series-card" aria-label={`View details for ${series.title}`} tabindex="0">
              <div class="lcars-card-header flex">
                <div class="w-24 h-10 bg-starfleet-gold rounded-tl-lg"></div>
                <div class="flex-1 h-10 bg-starfleet-blue flex items-center justify-center">
                  <span class="text-base font-bold tracking-wider text-white">{abbr}</span>
                </div>
                <div class="w-12 h-10 bg-starfleet-gold"></div>
              </div>
              <div class="card-body bg-space-black bg-opacity-90 p-0 border-x border-b border-starfleet-blue">
                <div class="card-date-badge">{primaryDate}</div>
                <div class="card-image-container">
                  <progressive-image
                    src={imageUrl}
                    fallback={`/images/placeholder-${abbr.toLowerCase()}.jpg`}
                    alt={series.title}
                    class="w-full h-full object-cover card-image"
                  ></progressive-image>
                  <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-space-black to-transparent p-3">
                    <span class="text-console-green text-sm font-mono font-bold">{secondaryDate}</span>
                  </div>
                </div>
                <h2 class="text-xl text-white font-semibold mb-3 border-b border-starfleet-blue pb-2 card-title">{series.title}</h2>
                <div class="flex justify-between text-gray-300 text-sm mb-3 bg-space-deep p-2 rounded card-meta">
                  <span class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-console-green" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    {secondaryDate}
                  </span>
                  <span class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-console-green" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                    {seasons} seasons
                  </span>
                </div>
                <p class="text-gray-300 text-sm leading-relaxed card-description">{summary}</p>
                {wikiUrl && (
                  <div class="mt-4 pt-2 border-t border-gray-700 card-links">
                    <a href={wikiUrl} target="_blank" rel="noopener noreferrer" class="memory-alpha-link-card text-xs text-starfleet-gold hover:underline inline-flex items-center bg-space-deep px-2 py-1 rounded" onClick={e => e.stopPropagation()}>
                      Memory Alpha
                      <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-1">
                        <path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"></path>
                        <path d="M15 3h6v6"></path>
                        <path d="M10 14L21 3"></path>
                      </svg>
                    </a>
                  </div>
                )}
              </div>
              <div class="lcars-card-footer flex">
                <div class="w-10 h-8 bg-starfleet-red"></div>
                <div class="flex-1 h-8 bg-console-blue"></div>
                <div class="w-24 h-8 bg-starfleet-gold rounded-br-lg"></div>
              </div>
            </a>
          </div>
        );
      })}
    </div>

    <!-- Pagination controls -->
    <div class="flex justify-between items-center my-8">
      <div class="series-count px-4 py-2 bg-space-black rounded-full text-white text-sm border border-starfleet-blue shadow-glow" id="series-count">
        {totalSeries} series
      </div>

      <div id="pagination-controls" class="flex justify-center items-center">
        <div class="lcars-pagination flex items-center bg-space-black border border-starfleet-blue rounded-lg overflow-hidden shadow-glow">
          <button id="prev-page" class="px-4 py-2 bg-starfleet-blue text-white hover:bg-starfleet-gold hover:text-space-black transition-colors">
            <span class="hidden md:inline">Previous</span>
            <span class="md:hidden">Prev</span>
          </button>
          <div class="px-4 py-2 text-white">
            Page <span id="current-page-num">1</span> of <span id="total-pages">{totalPages}</span>
          </div>
          <button id="next-page" class="px-4 py-2 bg-starfleet-blue text-white hover:bg-starfleet-gold hover:text-space-black transition-colors">
            Next
          </button>
        </div>
      </div>
    </div>

    <!-- No results message (hidden by default) -->
    <div id="no-results" class="hidden text-center py-8">
      <div class="lcars-panel p-6 inline-block">
        <p class="text-console-blue text-xl">No series match your search criteria.</p>
        <p class="text-white mt-2">Please adjust your filters or try a different search term.</p>
      </div>
    </div>
  </div>
</Layout>

<script
  is:inline
  id="initial-payload"
  type="application/json"
  set:html={JSON.stringify({
    series: initialSeries,
    totalPages: totalPages,
    totalSeries: totalSeries,
    pageSize: PAGE_SIZE,
    productionCompanies: productionCompanies,
    networks: networks,
    decades: decades
  })}
/>

<script>
  // TEMP: Add focus outline to all focusable elements for accessibility testing
  document.addEventListener('DOMContentLoaded', () => {
    const style = document.createElement('style');
    style.innerHTML = `
      a:focus, button:focus, select:focus, input:focus, [tabindex]:focus {
        outline: 3px solid #FFD700 !important;
        outline-offset: 2px !important;
        z-index: 9999 !important;
      }
    `;
    document.head.appendChild(style);

    // TEMP: Log focus events for timeline cards and buttons
    document.body.addEventListener('focusin', (e) => {
      if (e.target.classList.contains('series-card') || e.target.tagName === 'BUTTON') {
        console.log('[ACCESSIBILITY] Focused:', e.target);
      }
    });

    // TEMP: Announce updates to ARIA live region after filtering/pagination
    const ariaLive = document.getElementById('aria-live-region');
    const announce = (msg) => {
      if (ariaLive) {
        ariaLive.textContent = msg;
        setTimeout(() => { ariaLive.textContent = ''; }, 1000);
      }
    };
    // Patch render to announce updates
    const origRender = window.render;
    window.render = function(...args) {
      if (typeof origRender === 'function') origRender.apply(this, args);
      announce('Timeline updated.');
    };
  });

  // Client-side STAPI client using the Netlify proxy
  const stapiClient = {
    PROXY_URL: '/api/series', // Use the proxy endpoint

    async getSeries(page = 0, pageSize = 12, filters = {}) {
      try {
        const params = new URLSearchParams({
          pageNumber: page.toString(),
          pageSize: pageSize.toString(),
        });

        // Add filter parameters
        for (const [key, value] of Object.entries(filters)) {
          if (value && value !== 'all') { // Only add active filters
            params.append(key, value);
          }
        }

        const url = `${this.PROXY_URL}?${params.toString()}`;
        console.log(`Fetching via proxy: ${url}`); // Log URL

        const response = await fetch(url); // Fetch from the proxy

        if (!response.ok) {
           const errorData = await response.json().catch(() => ({ error: 'Failed to parse error response' }));
           console.error(`Proxy fetch error! Status: ${response.status}`, errorData);
           throw new Error(`HTTP error! status: ${response.status}, details: ${errorData.error || response.statusText}`);
        }

        const data = await response.json();
        console.log(`Received page ${page} (filtered: ${JSON.stringify(filters)}):`, data); // Log received data
        return data; // Should contain { series: [], page: { totalPages, totalElements } }
      } catch (error) {
        console.error('Error fetching series via proxy:', error);
        // Return an empty structure on error to prevent crashes
        return { series: [], page: { totalPages: 1, totalElements: 0 } };
      }
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    // Client-side slugify function to match server-side implementation
    function slugify(text) {
      return text
        .toString()
        .toLowerCase()
        .trim()
        .replace(/\s+/g, '-')        // Replace spaces with -
        .replace(/&/g, '-and-')      // Replace & with 'and'
        .replace(/[^\w\-]+/g, '')    // Remove all non-word characters
        .replace(/\-\-+/g, '-')      // Replace multiple - with single -
        .replace(/^-+/, '')          // Trim - from start of text
        .replace(/-+$/, '');         // Trim - from end of text
    }

    const payload = JSON.parse(document.getElementById('initial-payload').textContent);
    const PAGE_SIZE = payload.pageSize;
    let currentPage = 1;
    let totalPages = payload.totalPages;
    let totalSeries = payload.totalSeries;
    let allSeries = [...payload.series]; // Always holds only the current page's series
    let isLoading = false; // Prevent multiple simultaneous fetches
    let currentFilters = {}; // Initialize current filters
    let viewMode = 'chronology'; // Default view mode

    // DOM Elements
    const companyFilter = document.getElementById('company-filter');
    const networkFilter = document.getElementById('network-filter');
    const decadeFilter = document.getElementById('decade-filter');
    const searchInput = document.getElementById('search-input');
    const chronologyBtn = document.getElementById('view-chronology');
    const releaseBtn = document.getElementById('view-release');
    const prevBtn = document.getElementById('prev-page');
    const nextBtn = document.getElementById('next-page');
    const pageNum = document.getElementById('current-page-num');
    const totalNum = document.getElementById('total-pages');
    const countBadge = document.getElementById('series-count');
    const container = document.getElementById('series-container');
    const noResults = document.getElementById('no-results');

    const debounce = (fn, ms = 300) => {
      let t;
      return (...args) => {
        clearTimeout(t);
        t = setTimeout(() => fn(...args), ms);
      };
    };

    // Simplified filter function that works directly with the DOM
    function applyFilters() {
      if (isLoading) return; // Don't apply if already loading

      // Get current filter values
      const companyVal = companyFilter?.value;
      const networkVal = networkFilter?.value;
      const decadeVal = decadeFilter?.value;
      const searchTerm = searchInput.value.trim().toLowerCase();

      // Get all series cards
      const seriesCards = document.querySelectorAll('.timeline-row');
      let visibleCount = 0;

      // Loop through each card and check if it matches the filters
      seriesCards.forEach(card => {
        let shouldShow = true;

        // Get the series data from the card
        const title = card.querySelector('.card-title')?.textContent?.toLowerCase() || '';
        const network = card.querySelector('.card-meta')?.textContent?.toLowerCase() || '';
        const company = card.querySelector('.card-description')?.textContent?.toLowerCase() || '';
        const yearText = card.querySelector('.card-date-badge')?.textContent || '';
        const decade = yearText ? Math.floor(parseInt(yearText) / 10) * 10 : null;

        // Apply company filter
        if (companyVal && companyVal !== 'all') {
          // Get the company text from the card
          const companyText = card.querySelector('.card-company')?.textContent?.toLowerCase() || '';
          // Also check the description which might contain company info
          const descText = card.querySelector('.card-description')?.textContent?.toLowerCase() || '';

          // Check if either contains the selected company
          if (!companyText.includes(companyVal.toLowerCase()) &&
              !descText.includes(companyVal.toLowerCase()) &&
              !company.includes(companyVal.toLowerCase())) {
            shouldShow = false;
          }
        }

        // Apply network filter
        if (networkVal && networkVal !== 'all') {
          // Get the network text from the card
          const networkText = card.querySelector('.card-network')?.textContent?.toLowerCase() || '';
          // Also check the meta which might contain network info
          const metaText = card.querySelector('.card-meta')?.textContent?.toLowerCase() || '';

          // Check if either contains the selected network
          if (!networkText.includes(networkVal.toLowerCase()) &&
              !metaText.includes(networkVal.toLowerCase()) &&
              !network.includes(networkVal.toLowerCase())) {
            shouldShow = false;
          }
        }

        // Apply decade filter
        if (decadeVal && decadeVal !== 'all' && decade !== parseInt(decadeVal)) {
          shouldShow = false;
        }

        // Apply search filter
        if (searchTerm && !title.includes(searchTerm) &&
            !company.includes(searchTerm) &&
            !network.includes(searchTerm)) {
          shouldShow = false;
        }

        // Show or hide the card
        if (shouldShow) {
          card.style.display = '';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });

      // Update the count badge
      countBadge.textContent = `${visibleCount} series found`;

      // Show/hide no results message
      if (visibleCount === 0) {
        noResults.classList.remove('hidden');
        container.classList.add('hidden');
      } else {
        noResults.classList.add('hidden');
        container.classList.remove('hidden');
      }

      // Announce to screen readers
      const ariaLive = document.getElementById('aria-live-region');
      if (ariaLive) {
        ariaLive.textContent = `Filtered to ${visibleCount} series.`;
      }
    }

    // Function to sort the timeline cards based on view mode
    function sortTimelineCards() {
      const rows = Array.from(document.querySelectorAll('.timeline-row'));

      // Sort the rows based on view mode
      rows.sort((a, b) => {
        const aCard = a.querySelector('.series-card');
        const bCard = b.querySelector('.series-card');

        if (!aCard || !bCard) return 0;

        // Extract years for sorting
        let aYear = 0;
        let bYear = 0;

        if (viewMode === 'chronology') {
          // For chronology view, use the date badge (in-universe year)
          aYear = parseInt(aCard.querySelector('.card-date-badge')?.textContent || '0');
          bYear = parseInt(bCard.querySelector('.card-date-badge')?.textContent || '0');
        } else {
          // For release view, try to extract the production start year
          // First try from the meta text which contains production years
          const aMatch = aCard.querySelector('.card-meta')?.textContent?.match(/(\d{4})/);
          const bMatch = bCard.querySelector('.card-meta')?.textContent?.match(/(\d{4})/);

          if (aMatch) aYear = parseInt(aMatch[1]);
          if (bMatch) bYear = parseInt(bMatch[1]);

          // If not found, try from the date badge as fallback
          if (!aYear) aYear = parseInt(aCard.querySelector('.card-date-badge')?.textContent || '0');
          if (!bYear) bYear = parseInt(bCard.querySelector('.card-date-badge')?.textContent || '0');
        }

        return aYear - bYear;
      });

      // Remove all rows from container
      rows.forEach(row => row.remove());

      // Re-add rows in sorted order
      rows.forEach((row, idx) => {
        // Update alignment based on new order
        row.classList.remove('left', 'right');
        row.classList.add(idx % 2 === 0 ? 'left' : 'right');

        // Update connector position
        const connector = row.querySelector('.connector');
        if (connector) {
          connector.classList.remove('left-0', 'right-0');
          connector.classList.add(idx % 2 === 0 ? 'right-0' : 'left-0');
        }

        container.appendChild(row);
      });

      // Add a clearfix element
      const clearfix = document.createElement('div');
      clearfix.style.clear = 'both';
      container.appendChild(clearfix);

      // Apply filters to the newly sorted cards
      applyFilters();
    }

    // Debounced version of applying filters for search input
    const debouncedApplyFilters = debounce(applyFilters, 300);

    // Event Listeners - Trigger filter application
    companyFilter?.addEventListener('change', applyFilters);
    networkFilter?.addEventListener('change', applyFilters);
    decadeFilter?.addEventListener('change', applyFilters);
    searchInput.addEventListener('input', debouncedApplyFilters); // Use debounced version for search

    // View toggle
    chronologyBtn.addEventListener('click', () => {
      viewMode = 'chronology';
      chronologyBtn.classList.add('active');
      releaseBtn.classList.remove('active');

      // Update the cards with chronology view styling
      document.querySelectorAll('.series-card').forEach(card => {
        // Update color scheme for chronology view
        const header = card.querySelector('.lcars-card-header div:nth-child(2)');
        if (header) header.className = header.className.replace(/bg-[^\\s]+/, 'bg-starfleet-blue');

        // Update other elements as needed
        const cardBody = card.querySelector('.card-body');
        if (cardBody) cardBody.className = cardBody.className.replace(/border-[^\\s]+/, 'border-starfleet-blue');
      });

      // Sort the cards based on chronological order
      sortTimelineCards();
    });

    releaseBtn.addEventListener('click', () => {
      viewMode = 'release';
      releaseBtn.classList.add('active');
      chronologyBtn.classList.remove('active');

      // Update the cards with release view styling
      document.querySelectorAll('.series-card').forEach(card => {
        // Update color scheme for release view
        const header = card.querySelector('.lcars-card-header div:nth-child(2)');
        if (header) header.className = header.className.replace(/bg-[^\\s]+/, 'bg-starfleet-red');

        // Update other elements as needed
        const cardBody = card.querySelector('.card-body');
        if (cardBody) cardBody.className = cardBody.className.replace(/border-[^\\s]+/, 'border-starfleet-red');
      });

      // Sort the cards based on release order
      sortTimelineCards();
    });

    // Simplified pagination that works with the visible cards
    prevBtn.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        updatePagination();
      }
    });

    nextBtn.addEventListener('click', () => {
      if (currentPage < totalPages) {
        currentPage++;
        updatePagination();
      }
    });

    // Function to update pagination display and visible cards
    function updatePagination() {
      // Update page number display
      pageNum.textContent = currentPage;

      // Enable/disable pagination buttons
      prevBtn.disabled = currentPage <= 1;
      nextBtn.disabled = currentPage >= totalPages;

      // Get all visible cards (those that match current filters)
      const visibleCards = Array.from(document.querySelectorAll('.timeline-row'))
        .filter(card => card.style.display !== 'none');

      // Calculate pagination
      const startIndex = (currentPage - 1) * PAGE_SIZE;
      const endIndex = startIndex + PAGE_SIZE;

      // Show/hide cards based on pagination
      visibleCards.forEach((card, index) => {
        if (index >= startIndex && index < endIndex) {
          card.style.display = '';
        } else {
          card.style.display = 'none';
        }
      });

      // Update total pages based on visible cards
      totalPages = Math.ceil(visibleCards.length / PAGE_SIZE);
      totalNum.textContent = totalPages;

      // Announce to screen readers
      const ariaLive = document.getElementById('aria-live-region');
      if (ariaLive) {
        ariaLive.textContent = `Page ${currentPage} of ${totalPages}.`;
      }
    }

    // Initial setup
    sortTimelineCards(); // Sort cards based on initial view mode
    applyFilters(); // Apply any initial filters
  });
</script>

<style>
  /* Timeline layout styles - properly implemented two-column layout */
  .timeline-container {
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 0;
  }

  .timeline-row {
    position: relative;
    margin-bottom: 40px;
  }

  .timeline-row.left .series-card {
    float: left;
    margin-right: 60px;
  }

  .timeline-row.right .series-card {
    float: right;
    margin-left: 60px;
  }

  /* Only apply single-column layout on mobile */
  @media (max-width: 768px) {
    .timeline-container, .timeline-row, .series-card {
      max-width: 100vw;
      width: 100%;
      float: none;
      display: block;
      margin: 0 auto;
    }
  }
  /* Filter and Button Styles */
  .trek-button {
    background-color: var(--space-black);
    color: var(--starfleet-gold);
    border: 1px solid var(--starfleet-blue);
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .trek-button:hover {
    background-color: var(--starfleet-blue);
    color: white;
    transform: translateY(-2px);
  }

  .trek-button.active {
    background-color: var(--console-blue);
    box-shadow: 0 0 15px var(--console-blue);
  }

  .trek-button::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: var(--starfleet-gold);
    transform: scaleX(0);
    transform-origin: right;
    transition: transform 0.3s ease;
  }

  .trek-button:hover::after {
    transform: scaleX(1);
    transform-origin: left;
  }

  /* Enhanced Filter Styles */
  .filter-group {
    position: relative;
  }

  .filter-group select {
    cursor: pointer;
    transition: all 0.3s ease;
    border-width: 2px;
  }

  .filter-group select:hover {
    border-color: var(--starfleet-gold);
    box-shadow: 0 0 10px rgba(0, 178, 255, 0.3);
  }

  .filter-group select:focus {
    outline: none;
    border-color: var(--starfleet-gold);
    box-shadow: 0 0 15px rgba(0, 178, 255, 0.5);
  }

  .filter-group h3 {
    position: relative;
    display: inline-block;
  }

  .filter-group h3::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background: var(--starfleet-blue);
  }

  /* Timeline container with enhanced styling */
  .timeline-container {
    position: relative;
    max-width: 1000px;
    margin: 0 auto;
    padding: 60px 0;
    overflow: visible;
  }

  /* Timeline legend */
  .timeline-legend {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 2rem;
    background: rgba(3, 10, 23, 0.7);
    padding: 0.75rem;
    border-radius: 8px;
    border: 1px solid var(--starfleet-blue);
    z-index: 5;
    position: relative;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .legend-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
  }

  .legend-dot.in-universe {
    background-color: var(--starfleet-blue);
    box-shadow: 0 0 8px var(--starfleet-blue);
  }

  .legend-dot.release-order {
    background-color: var(--starfleet-red);
    box-shadow: 0 0 8px var(--starfleet-red);
  }

  .legend-text {
    color: white;
    font-size: 0.875rem;
  }

  /* Enhanced timeline vertical line */
  .timeline-container::before {
    content: '';
    position: absolute;
    width: 8px;
    background: linear-gradient(to bottom, var(--starfleet-gold), var(--starfleet-blue), var(--console-blue));
    top: 0;
    bottom: 0;
    left: 50%;
    margin-left: -4px;
    border-radius: 4px;
    box-shadow: 0 0 20px var(--starfleet-blue);
    z-index: 0;
  }

  /* Year markers on timeline */
  .timeline-container .year-marker {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    background: var(--space-black);
    color: var(--starfleet-gold);
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: bold;
    border: 2px solid var(--starfleet-gold);
    box-shadow: 0 0 10px var(--starfleet-gold);
    z-index: 2;
    white-space: nowrap;
  }

  /* Improved series card styles */
  .series-card {
    position: relative;
    width: calc(50% - 60px);
    margin-bottom: 100px; /* Further increased for better vertical spacing */
    transition: all 0.3s cubic-bezier(0.17, 0.67, 0.3, 0.96);
    overflow: hidden;
    display: block;
    background-color: rgba(3, 10, 23, 0.85);
    border: 2px solid var(--starfleet-blue);
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    z-index: 2; /* Ensure cards appear above timeline elements */
  }

  /* Card date badge */
  .card-date-badge {
    position: absolute;
    top: 15px;
    right: 15px;
    background: var(--space-black);
    color: var(--starfleet-gold);
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: bold;
    font-family: 'Courier New', monospace;
    border: 2px solid var(--starfleet-gold);
    box-shadow: 0 0 12px rgba(255, 204, 0, 0.6);
    z-index: 10;
    letter-spacing: 0.5px;
  }

  /* Card image container */
  .card-image-container {
    position: relative;
    border: 2px solid var(--starfleet-blue);
    box-shadow: 0 0 20px rgba(0, 178, 255, 0.5);
    transition: all 0.3s ease;
    height: 200px;
    overflow: hidden;
  }

  .card-image {
    transition: transform 0.5s ease;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  /* Card title */
  .card-title {
    position: relative;
    padding: 1rem 0.75rem;
    margin: 0;
    background: linear-gradient(90deg, rgba(0, 178, 255, 0.2), transparent);
    color: var(--starfleet-gold);
    font-size: 1.5rem;
    font-weight: bold;
    text-shadow: 0 0 10px rgba(255, 204, 0, 0.5);
    border-bottom: 2px solid var(--starfleet-blue);
    display: flex;
    align-items: center;
  }

  .card-title::before {
    content: '•';
    color: var(--starfleet-gold);
    margin-right: 0.5rem;
    font-size: 1.5rem;
    text-shadow: 0 0 10px var(--starfleet-gold);
  }

  /* Card meta info */
  .card-meta {
    background: rgba(1, 10, 31, 0.7);
    border: 1px solid rgba(0, 178, 255, 0.4);
    padding: 0.75rem;
    margin: 0.75rem;
    border-radius: 4px;
    display: flex;
    justify-content: space-between;
    font-family: 'Courier New', monospace;
    color: var(--console-green);
  }

  /* Card description */
  .card-description {
    line-height: 1.6;
    color: rgba(255, 255, 255, 0.9);
    padding: 0.75rem 1rem 1.25rem;
    font-size: 1rem;
    border-top: 1px solid rgba(0, 178, 255, 0.2);
    margin-top: 0.5rem;
  }

  /* Timeline rows */
  .timeline-row {
    position: relative;
    width: 100%;
    margin-bottom: 80px;
    min-height: 200px;
    display: flex;
    align-items: center;
  }

  /* Left side timeline rows */
  .timeline-row.left {
    justify-content: flex-end;
    padding-right: calc(50% + 40px);
  }

  /* Right side timeline rows */
  .timeline-row.right {
    justify-content: flex-start;
    padding-left: calc(50% + 40px);
  }

  /* Series cards inside timeline rows */
  .timeline-row .series-card {
    width: 450px;
    margin-bottom: 20px;
    text-decoration: none;
    color: inherit;
    background: rgba(3, 10, 23, 0.85);
    border: 2px solid var(--starfleet-blue);
    border-radius: 12px;
    box-shadow: 0 0 25px rgba(0, 178, 255, 0.3);
    transition: all 0.3s ease;
    overflow: hidden;
  }

  /* Make sure the cards don't get too small on mobile */
  @media (max-width: 768px) {
    .timeline-row .series-card {
      width: 90%;
    }

    .timeline-row.left, .timeline-row.right {
      padding: 0;
      justify-content: center;
    }
  }

  /* Timeline dots with pulsing animation */
  .timeline-row::after {
    content: '';
    position: absolute;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    z-index: 1;
    background: var(--starfleet-gold);
    box-shadow: 0 0 15px var(--starfleet-gold);
    animation: pulse 2s infinite;
    top: 50%;
    transform: translateY(-50%);
  }

  /* Position dots for left/right rows */
  .timeline-row.left::after {
    right: calc(50% - 12px);
  }

  .timeline-row.right::after {
    left: calc(50% - 12px);
  }

  /* Connecting lines to timeline */
  .timeline-row::before {
    content: '';
    position: absolute;
    top: 50%;
    width: 40px;
    height: 4px;
    background: var(--starfleet-gold);
    z-index: 1;
    box-shadow: 0 0 10px var(--starfleet-gold);
    transform: translateY(-50%);
  }

  /* Position connecting lines for left/right rows */
  .timeline-row.left::before {
    right: 50%;
  }

  .timeline-row.right::before {
    left: 50%;
  }

  /* Enhanced hover effects */
  .series-card:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 15px 30px rgba(0, 178, 255, 0.6);
    border-color: var(--starfleet-gold);
  }

  .series-card:hover img {
    transform: scale(1.1);
    transition: transform 0.5s ease;
  }

  .series-card:hover .card-image-container {
    box-shadow: 0 0 25px rgba(0, 178, 255, 0.7);
    border-color: var(--starfleet-gold);
  }

  .series-card:hover .card-date-badge {
    background-color: var(--starfleet-gold);
    color: var(--space-black);
    box-shadow: 0 0 15px rgba(255, 204, 0, 0.8);
  }

  .series-card:hover .card-title {
    background: linear-gradient(90deg, rgba(255, 204, 0, 0.2), transparent);
    text-shadow: 0 0 15px rgba(255, 204, 0, 0.7);
  }

  .series-card:hover .card-meta {
    border-color: var(--starfleet-gold);
    color: var(--starfleet-gold);
  }

  /* Pulsing animation for timeline dots */
  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(255, 204, 0, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(255, 204, 0, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(255, 204, 0, 0);
    }
  }

  /* Panel styling */
  .lcars-panel {
    background-color: rgba(3, 10, 23, 0.7);
    border: none;
    border-radius: 0;
    overflow: hidden;
    padding: 0;
  }

  .card-body {
    transition: all 0.3s ease;
    padding: 1rem;
  }

  img {
    transition: transform 0.5s ease;
  }

  /* Enhanced pagination styles */
  .lcars-pagination {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(0, 178, 255, 0.2);
  }

  /* Shadow glow effect */
  .shadow-glow {
    box-shadow: 0 0 15px rgba(0, 178, 255, 0.3);
    transition: box-shadow 0.3s ease;
  }

  .shadow-glow:hover {
    box-shadow: 0 0 20px rgba(0, 178, 255, 0.5);
  }

  .lcars-pagination button {
    position: relative;
    z-index: 2;
    transition: all 0.2s ease;
    font-weight: bold;
    min-width: 100px;
  }

  .lcars-pagination button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .lcars-pagination button:not(:disabled):hover {
    background-color: var(--starfleet-gold);
    color: var(--space-black);
  }

  .lcars-pagination::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 50%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 204, 0, 0.1), transparent);
    animation: sweep 2s infinite;
    z-index: 1;
  }

  @keyframes sweep {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  /* Clear floats after timeline */
  .timeline-container::after {
    content: "";
    display: table;
    clear: both;
  }

  /* Memory Alpha links and colored bars styling */
  a[href*="memory-alpha"], a[href*="Memory-Alpha"], .memory-alpha-link {
    display: inline-block;
    margin: 40px 0;
    position: relative;
    padding: 15px;
    background-color: rgba(3, 10, 23, 0.5);
    border-radius: 6px;
    transition: all 0.3s ease;
    border-left: 3px solid var(--starfleet-blue);
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
    text-decoration: none;
    z-index: 5;
    width: auto;
    max-width: 100%;
  }

  a[href*="memory-alpha"]:hover, a[href*="Memory-Alpha"]:hover, .memory-alpha-link:hover {
    background-color: rgba(3, 10, 23, 0.8);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    border-left-color: var(--starfleet-gold);
  }

  /* Add spacing between timeline entries */
  .timeline-row {
    margin-bottom: 70px;
    position: relative;
    clear: both;
    padding: 25px 0;
    border-radius: 8px;
  }

  /* Add visual separation between timeline sections */
  .timeline-row:nth-child(odd) {
    background-color: rgba(0, 0, 0, 0.2);
  }

  /* Style all colored bars (targeting by their common structure) */
  [class*="bg-starfleet-"], [class*="bg-console-"] {
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.4);
    position: relative;
    margin: 15px 0;
    display: inline-block;
    width: auto;
    max-width: 100%;
  }

  /* Add more spacing between horizontal bars */
  div > div > div[class*="bg-"] {
    margin-bottom: 30px;
  }

  /* Fix for Memory Alpha links and colored bars to be properly positioned */
  .timeline-row > a[href*="memory-alpha"],
  .timeline-row > a[href*="Memory-Alpha"],
  .timeline-row > .memory-alpha-link,
  .timeline-row > div[class*="bg-"] {
    position: relative;
    display: block;
    clear: both;
    float: none;
    width: auto;
    max-width: 100%;
  }

  /* Ensure Memory Alpha links are associated with their series */
  .timeline-row.left > a[href*="memory-alpha"],
  .timeline-row.left > a[href*="Memory-Alpha"],
  .timeline-row.left > .memory-alpha-link,
  .timeline-row.left > div[class*="bg-"] {
    float: left;
    margin-right: 60px;
    width: calc(50% - 60px);
  }

  .timeline-row.right > a[href*="memory-alpha"],
  .timeline-row.right > a[href*="Memory-Alpha"],
  .timeline-row.right > .memory-alpha-link,
  .timeline-row.right > div[class*="bg-"] {
    float: right;
    margin-left: 60px;
    width: calc(50% - 60px);
  }

  /* Fix for Memory Alpha links inside cards */
  .memory-alpha-link-card {
    display: inline-flex !important;
    margin: 0 !important;
    float: none !important;
    width: auto !important;
    position: relative !important;
    border-left: none !important;
  }

  /* Fix for Memory Alpha links that are dynamically added */
  .timeline-row::after {
    content: "";
    display: table;
    clear: both;
  }

  /* Ensure Memory Alpha links are contained within their timeline rows */
  .timeline-container > a[href*="memory-alpha"],
  .timeline-container > a[href*="Memory-Alpha"],
  .timeline-container > .memory-alpha-link,
  .timeline-container > div[class*="bg-"] {
    display: none !important; /* Hide any links that are direct children of the timeline container */
  }

  /* Add dividers between timeline entries */
  .timeline-row:not(:last-child)::after {
    content: '';
    position: absolute;
    bottom: -35px;
    left: 50%;
    transform: translateX(-50%);
    width: 90%;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(0, 178, 255, 0.4), transparent);
  }

  /* Improve spacing between elements */
  .timeline-container > div {
    margin-bottom: 50px;
  }

  /* Add spacing between all elements */
  .timeline-container * + * {
    margin-top: 10px;
  }

  /* Enhanced filter styles */
  .filter-label {
    position: relative;
    display: inline-block;
    margin-bottom: 0.75rem;
  }

  .filter-label::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, var(--starfleet-blue), transparent);
  }

  .filter-select-wrapper {
    position: relative;
    transition: all 0.3s ease;
  }

  .filter-select {
    transition: all 0.3s ease;
  }

  .filter-select:focus + .filter-chevron svg {
    fill: var(--console-blue);
    filter: drop-shadow(0 0 5px var(--console-blue));
  }

  .view-toggle-container {
    display: flex;
    gap: 0.5rem;
  }

  .search-container {
    position: relative;
  }

  .search-container input:focus + div svg {
    color: var(--starfleet-gold);
  }

  /* Enhanced responsive timeline */
  @media screen and (max-width: 992px) {
    .series-card {
      width: calc(50% - 40px);
      margin-bottom: 70px; /* Adjusted spacing for medium screens */
    }

    .timeline-row {
      margin-bottom: 40px;
    }

    .memory-alpha-link {
      margin: 25px 0;
    }

    .series-card::after {
      width: 15px;
      height: 15px;
      right: -55px;
    }

    .series-card:nth-child(even)::after {
      left: -55px;
    }

    .series-card::before {
      width: 40px;
    }

    .series-card:nth-child(odd)::before {
      right: -40px;
    }

    .series-card:nth-child(even)::before {
      left: -40px;
    }

    .timeline-legend {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: center;
    }
  }

  @media screen and (max-width: 768px) {
    /* Place the timeline to the left */
    .timeline-container::before {
      left: 31px;
    }

    /* Full-width cards */
    .series-card {
      width: calc(100% - 80px);
      float: right;
      margin-left: 80px;
      margin-bottom: 50px; /* Adjusted spacing for mobile */
    }

    .timeline-row {
      margin-bottom: 30px;
      padding: 10px 0;
    }

    .memory-alpha-link {
      margin: 15px 0;
      padding: 8px;
    }

    /* Adjust Memory Alpha links and colored bars for mobile */
    .timeline-row.left > a[href*="memory-alpha"],
    .timeline-row.left > a[href*="Memory-Alpha"],
    .timeline-row.left > .memory-alpha-link,
    .timeline-row.left > div[class*="bg-"],
    .timeline-row.right > a[href*="memory-alpha"],
    .timeline-row.right > a[href*="Memory-Alpha"],
    .timeline-row.right > .memory-alpha-link,
    .timeline-row.right > div[class*="bg-"] {
      width: calc(100% - 80px);
      float: right;
      margin-left: 80px;
      margin-right: 0;
    }

    /* Ensure Memory Alpha links inside cards remain properly styled on mobile */
    .memory-alpha-link-card {
      display: inline-flex !important;
      margin: 0 !important;
      float: none !important;
      width: auto !important;
    }

    /* Make all cards stack on top of each other */
    .series-card:nth-child(odd),
    .series-card:nth-child(even) {
      left: 0;
      right: auto;
      float: right;
      clear: both;
    }

    /* Make all dots align to the left */
    .series-card::after,
    .series-card:nth-child(even)::after {
      left: -45px;
      right: auto;
    }

    /* Adjust connecting lines for mobile */
    .series-card::before,
    .series-card:nth-child(odd)::before,
    .series-card:nth-child(even)::before {
      left: -35px;
      width: 35px;
    }

    /* Adjust filters for mobile */
    .filters .flex {
      flex-direction: column;
      gap: 1rem;
    }

    .filter-group {
      width: 100%;
    }

    /* Year markers positioning for mobile */
    .timeline-container .year-marker {
      left: 31px;
      transform: translateX(-50%);
      font-size: 0.7rem;
      padding: 4px 8px;
    }

    .timeline-legend {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
      margin-left: 60px;
      margin-bottom: 1.5rem;
    }
  }

  @media screen and (max-width: 480px) {
    .series-card {
      margin-left: 60px;
      width: calc(100% - 60px);
    }

    .lcars-pagination button {
      min-width: 80px;
      padding: 0.5rem;
      font-size: 0.9rem;
    }

    .card-date-badge {
      top: 8px;
      right: 8px;
      font-size: 0.7rem;
      padding: 3px 6px;
    }

    .card-title {
      font-size: 1.1rem;
    }

    .card-meta {
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;
    }
  }

  .lcars-pagination button {
    position: relative;
    z-index: 2;
    transition: all 0.2s ease;
    font-weight: bold;
    min-width: 100px;
  }

  .lcars-pagination button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .lcars-pagination button:not(:disabled):hover {
    background-color: var(--starfleet-gold);
    color: var(--space-black);
  }

  .lcars-pagination::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 50%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 204, 0, 0.1), transparent);
    animation: sweep 2s infinite;
    z-index: 1;
  }

  @keyframes sweep {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  /* Clear floats after timeline */
  .timeline-container::after {
    content: "";
    display: table;
    clear: both;
  }

  /* Memory Alpha links and colored bars styling */
  a[href*="memory-alpha"], a[href*="Memory-Alpha"], .memory-alpha-link {
    display: inline-block;
    margin: 40px 0;
    position: relative;
    padding: 15px;
    background-color: rgba(3, 10, 23, 0.5);
    border-radius: 6px;
    transition: all 0.3s ease;
    border-left: 3px solid var(--starfleet-blue);
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
    text-decoration: none;
    z-index: 5;
    width: auto;
    max-width: 100%;
  }

  a[href*="memory-alpha"]:hover, a[href*="Memory-Alpha"]:hover, .memory-alpha-link:hover {
    background-color: rgba(3, 10, 23, 0.8);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    border-left-color: var(--starfleet-gold);
  }

  /* Add spacing between timeline entries */
  .timeline-row {
    margin-bottom: 70px;
    position: relative;
    clear: both;
    padding: 25px 0;
    border-radius: 8px;
  }

  /* Add visual separation between timeline sections */
  .timeline-row:nth-child(odd) {
    background-color: rgba(0, 0, 0, 0.2);
  }

  /* Style all colored bars (targeting by their common structure) */
  [class*="bg-starfleet-"], [class*="bg-console-"] {
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.4);
    position: relative;
    margin: 15px 0;
    display: inline-block;
    width: auto;
    max-width: 100%;
  }

  /* Add more spacing between horizontal bars */
  div > div > div[class*="bg-"] {
    margin-bottom: 30px;
  }

  /* Fix for Memory Alpha links and colored bars to be properly positioned */
  .timeline-row > a[href*="memory-alpha"],
  .timeline-row > a[href*="Memory-Alpha"],
  .timeline-row > .memory-alpha-link,
  .timeline-row > div[class*="bg-"] {
    position: relative;
    display: block;
    clear: both;
    float: none;
    width: auto;
    max-width: 100%;
  }

  /* Ensure Memory Alpha links are associated with their series */
  .timeline-row.left > a[href*="memory-alpha"],
  .timeline-row.left > a[href*="Memory-Alpha"],
  .timeline-row.left > .memory-alpha-link,
  .timeline-row.left > div[class*="bg-"] {
    float: left;
    margin-right: 60px;
    width: calc(50% - 60px);
  }

  .timeline-row.right > a[href*="memory-alpha"],
  .timeline-row.right > a[href*="Memory-Alpha"],
  .timeline-row.right > .memory-alpha-link,
  .timeline-row.right > div[class*="bg-"] {
    float: right;
    margin-left: 60px;
    width: calc(50% - 60px);
  }

  /* Fix for Memory Alpha links inside cards */
  .memory-alpha-link-card {
    display: inline-flex !important;
    margin: 0 !important;
    float: none !important;
    width: auto !important;
    position: relative !important;
    border-left: none !important;
  }

  /* Fix for Memory Alpha links that are dynamically added */
  .timeline-row::after {
    content: "";
    display: table;
    clear: both;
  }

  /* Ensure Memory Alpha links are contained within their timeline rows */
  .timeline-container > a[href*="memory-alpha"],
  .timeline-container > a[href*="Memory-Alpha"],
  .timeline-container > .memory-alpha-link,
  .timeline-container > div[class*="bg-"] {
    display: none !important; /* Hide any links that are direct children of the timeline container */
  }

  /* Add dividers between timeline entries */
  .timeline-row:not(:last-child)::after {
    content: '';
    position: absolute;
    bottom: -35px;
    left: 50%;
    transform: translateX(-50%);
    width: 90%;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(0, 178, 255, 0.4), transparent);
  }

  /* Improve spacing between elements */
  .timeline-container > div {
    margin-bottom: 50px;
  }

  /* Add spacing between all elements */
  .timeline-container * + * {
    margin-top: 10px;
  }

  /* Enhanced filter styles */
  .filter-label {
    position: relative;
    display: inline-block;
    margin-bottom: 0.75rem;
  }

  .filter-label::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, var(--starfleet-blue), transparent);
  }

  .filter-select-wrapper {
    position: relative;
    transition: all 0.3s ease;
  }

  .filter-select {
    transition: all 0.3s ease;
  }

  .filter-select:focus + .filter-chevron svg {
    fill: var(--console-blue);
    filter: drop-shadow(0 0 5px var(--console-blue));
  }

  .view-toggle-container {
    display: flex;
    gap: 0.5rem;
  }

  .search-container {
    position: relative;
  }

  .search-container input:focus + div svg {
    color: var(--starfleet-gold);
  }
  /* Enhanced responsive timeline */
  @media screen and (max-width: 992px) {
    .series-card {
      width: calc(50% - 40px);
      margin-bottom: 70px; /* Adjusted spacing for medium screens */
    }

    .timeline-row {
      margin-bottom: 40px;
    }

    .memory-alpha-link {
      margin: 25px 0;
    }

    .series-card::after {
      width: 15px;
      height: 15px;
      right: -55px;
    }

    .series-card:nth-child(even)::after {
      left: -55px;
    }

    .series-card::before {
      width: 40px;
    }

    .series-card:nth-child(odd)::before {
      right: -40px;
    }

    .series-card:nth-child(even)::before {
      left: -40px;
    }

    .timeline-legend {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: center;
    }
  }

  @media screen and (max-width: 768px) {
    /* Place the timeline to the left */
    .timeline-container::before {
      left: 31px;
    }

    /* Full-width cards */
    .series-card {
      width: calc(100% - 80px);
      float: right;
      margin-left: 80px;
      margin-bottom: 50px; /* Adjusted spacing for mobile */
    }

    .timeline-row {
      margin-bottom: 30px;
      padding: 10px 0;
    }

    .memory-alpha-link {
      margin: 15px 0;
      padding: 8px;
    }

    /* Adjust Memory Alpha links and colored bars for mobile */
    .timeline-row.left > a[href*="memory-alpha"],
    .timeline-row.left > a[href*="Memory-Alpha"],
    .timeline-row.left > .memory-alpha-link,
    .timeline-row.left > div[class*="bg-"],
    .timeline-row.right > a[href*="memory-alpha"],
    .timeline-row.right > a[href*="Memory-Alpha"],
    .timeline-row.right > .memory-alpha-link,
    .timeline-row.right > div[class*="bg-"] {
      width: calc(100% - 80px);
      float: right;
      margin-left: 80px;
      margin-right: 0;
    }

    /* Ensure Memory Alpha links inside cards remain properly styled on mobile */
    .memory-alpha-link-card {
      display: inline-flex !important;
      margin: 0 !important;
      float: none !important;
      width: auto !important;
    }

    /* Make all cards stack on top of each other */
    .series-card:nth-child(odd),
    .series-card:nth-child(even) {
      left: 0;
      right: auto;
      float: right;
      clear: both;
    }

    /* Make all dots align to the left */
    .series-card::after,
    .series-card:nth-child(even)::after {
      left: -45px;
      right: auto;
    }

    /* Adjust connecting lines for mobile */
    .series-card::before,
    .series-card:nth-child(odd)::before,
    .series-card:nth-child(even)::before {
      left: -35px;
      width: 35px;
    }

    /* Adjust filters for mobile */
    .filters .flex {
      flex-direction: column;
      gap: 1rem;
    }

    .filter-group {
      width: 100%;
    }

    /* Year markers positioning for mobile */
    .timeline-container .year-marker {
      left: 31px;
      transform: translateX(-50%);
      font-size: 0.7rem;
      padding: 4px 8px;
    }

    .timeline-legend {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
      margin-left: 60px;
      margin-bottom: 1.5rem;
    }
  }

  @media screen and (max-width: 480px) {
    .series-card {
      margin-left: 60px;
      width: calc(100% - 60px);
    }

    .lcars-pagination button {
      min-width: 80px;
      padding: 0.5rem;
      font-size: 0.9rem;
    }

    .card-date-badge {
      top: 8px;
      right: 8px;
      font-size: 0.7rem;
      padding: 3px 6px;
    }

    .card-title {
      font-size: 1.1rem;
    }

    .card-meta {
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;
    }
  }
</style>
