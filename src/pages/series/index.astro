---
import Layout from '../../layouts/Layout.astro';
import { stapiService, extractYears, extractStardateYears } from '../../services/stapiService';
import ProgressiveImage from '../../components/ProgressiveImage.js';

// SEO metadata for pagination
const currentPage = 1; // Initial page is always 1 for SSR
const canonicalURL = new URL(Astro.url.pathname, Astro.site).href;

// Pagination settings
const PAGE_SIZE = 12; // Number of series to display per page
let initialSeries = [];
let totalPages = 1;
let totalSeries = 0;

// Import the local series data at the top level
let seriesLocalJson = [];
try {
  // Try to import the local series data
  seriesLocalJson = await import('../../data/series.json').then(m => m.default);
} catch (error) {
  console.error('Failed to import local series data:', error);
  // Will fall back to STAPI API below
}

// Fetch only the first page of series for the initial build
try {
  // Use local series data directly for the initial build if available
  if (seriesLocalJson && seriesLocalJson.length > 0) {
    import.meta.env.SSR && console.log('Using local series data for initial build');
    
    // Get the first page of series
    initialSeries = seriesLocalJson.slice(0, PAGE_SIZE);
    totalPages = Math.ceil(seriesLocalJson.length / PAGE_SIZE);
    totalSeries = seriesLocalJson.length;
  } else {
    // Fallback to STAPI API if local data is not available
    import.meta.env.SSR && console.log('Local series data not available, fetching from STAPI');
    
    // Fetch all series from STAPI
    let allSeries = await stapiService.getSeries();
    
    // Filter out irrelevant entries and ensure we have the main series
    const mainSeries = ["Star Trek", "Star Trek: The Next Generation", "Star Trek: Deep Space Nine", 
                        "Star Trek: Voyager", "Star Trek: Enterprise", "Star Trek: Discovery", 
                        "Star Trek: Picard", "Star Trek: The Animated Series"];
    
    allSeries = allSeries.filter(series => mainSeries.includes(series.title));
    
    // If STAPI fails or returns insufficient data, use fallback
    if (allSeries.length < 5) {
      allSeries = [
        {
          title: "Star Trek: The Original Series",
          uid: "SRMA0000001", // Made-up UID
          abbreviation: "TOS",
          productionStartYear: 1966,
          productionEndYear: 1969,
          seasonsCount: 3,
          episodesCount: 79,
          originalNetwork: "NBC",
          productionCompany: "Desilu Productions"
        },
        {
          title: "Star Trek: The Animated Series",
          uid: "SRMA0000002", // Made-up UID
          abbreviation: "TAS",
          productionStartYear: 1973,
          productionEndYear: 1974,
          seasonsCount: 2,
          episodesCount: 22,
          originalNetwork: "NBC",
          productionCompany: "Filmation"
        },
        {
          title: "Star Trek: The Next Generation",
          uid: "SRMA0000003", // Made-up UID
          abbreviation: "TNG",
          productionStartYear: 1987,
          productionEndYear: 1994,
          seasonsCount: 7,
          episodesCount: 178,
          originalNetwork: "Syndication",
          productionCompany: "Paramount Television"
        },
        {
          title: "Star Trek: Deep Space Nine",
          uid: "SRMA0000004", // Made-up UID
          abbreviation: "DS9",
          productionStartYear: 1993,
          productionEndYear: 1999,
          seasonsCount: 7,
          episodesCount: 176,
          originalNetwork: "Syndication",
          productionCompany: "Paramount Television"
        },
        {
          title: "Star Trek: Voyager",
          uid: "SRMA0000005", // Made-up UID
          abbreviation: "VOY",
          productionStartYear: 1995,
          productionEndYear: 2001,
          seasonsCount: 7,
          episodesCount: 172,
          originalNetwork: "UPN",
          productionCompany: "Paramount Television"
        },
        {
          title: "Star Trek: Enterprise",
          uid: "SRMA0000006", // Made-up UID
          abbreviation: "ENT",
          productionStartYear: 2001,
          productionEndYear: 2005,
          seasonsCount: 4,
          episodesCount: 98,
          originalNetwork: "UPN",
          productionCompany: "Paramount Television"
        },
        {
          title: "Star Trek: Discovery",
          uid: "SRMA0000007", // Made-up UID
          abbreviation: "DISC",
          productionStartYear: 2017,
          productionEndYear: 2024,
          seasonsCount: 5,
          episodesCount: 65,
          originalNetwork: "CBS All Access/Paramount+",
          productionCompany: "CBS Studios"
        },
        {
          title: "Star Trek: Picard",
          uid: "SRMA0000008", // Made-up UID
          abbreviation: "PIC",
          productionStartYear: 2020,
          productionEndYear: 2023,
          seasonsCount: 3,
          episodesCount: 30,
          originalNetwork: "CBS All Access/Paramount+",
          productionCompany: "CBS Studios"
        }
      ];
    }
    
    // Map STAPI data to our format
    allSeries = allSeries.map(series => ({
      ...series,
      years: extractYears(series),
      stardate: extractStardateYears(series),
      image: stapiService.getImageUrl(series.title, 'series'),
      slug: series.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '')
    }));
    
    // Enhance with Memory Alpha data for each series
    for (let i = 0; i < allSeries.length; i++) {
      try {
        const series = allSeries[i];
        const wikiTitle = series.title.replace('Star Trek: ', '');
        const wikiData = await stapiService.getMemoryAlphaContent(wikiTitle);
        
        if (wikiData.image) {
          series.wikiImage = wikiData.image;
        }
        if (wikiData.summary) {
          series.wikiSummary = wikiData.summary;
        }
        series.wikiUrl = wikiData.wikiUrl;
      } catch (error) {
        console.error(`Error fetching Memory Alpha data for series:`, error);
      }
    }
    
    initialSeries = allSeries.slice(0, PAGE_SIZE);
    totalPages = Math.ceil(allSeries.length / PAGE_SIZE);
    totalSeries = allSeries.length;
  }
  
  console.log(`Initial build: Fetched ${initialSeries.length} series. Total series: ${totalSeries}, Total pages: ${totalPages}.`);
  console.log('[series/index.astro] Series slugs for cards:', initialSeries.map(s => s.slug || s.uid || s.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '')));
  
} catch (error) {
  console.error('Error fetching initial series data:', error);
  // Add fallback data if needed
  initialSeries = [ /* Add fallback series objects here if API fails */ ];
  totalSeries = initialSeries.length;
  totalPages = 1;
}

// Extract production companies and networks for filter dropdowns
const productionCompanies = [...new Set(initialSeries
  .map(s => {
    if (!s.productionCompany) return null;
    return typeof s.productionCompany === 'object' && s.productionCompany.name
      ? s.productionCompany.name
      : s.productionCompany;
  })
  .filter(Boolean)
)].sort();

const networks = [...new Set(initialSeries
  .map(s => {
    if (!s.originalNetwork) return null;
    return typeof s.originalNetwork === 'object' && s.originalNetwork.name
      ? s.originalNetwork.name
      : s.originalNetwork;
  })
  .filter(Boolean)
)].sort();

// Extract decades for filter dropdown
const decades = [...new Set(initialSeries
  .map(s => s.productionStartYear ? Math.floor(s.productionStartYear / 10) * 10 : null)
  .filter(Boolean)
)].sort();

// Create JSON-LD schema for the series list page
const seriesListSchema = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "Star Trek Series | Complete Guide to All Star Trek TV Shows",
  "description": "Explore all Star Trek series from The Original Series to Discovery, Picard and beyond. Get episode guides, character information, and timeline placement.",
  "url": "https://star-trek-timelines.netlify.app/series/",
  "isPartOf": {
    "@type": "WebSite",
    "name": "Star Trek Timelines",
    "url": "https://star-trek-timelines.netlify.app/"
  },
  "about": {
    "@type": "CreativeWorkSeries",
    "name": "Star Trek",
    "description": "Science fiction media franchise created by Gene Roddenberry"
  },
  "hasPart": initialSeries.map(series => ({
    "@type": "TVSeries",
    "name": series.title,
    "alternateName": series.abbreviation,
    "url": `https://star-trek-timelines.netlify.app/series/${series.slug}/`,
    "temporalCoverage": series.years,
    "numberOfEpisodes": series.episodes || series.episodesCount,
    "numberOfSeasons": series.seasons || series.seasonsCount
  }))
};
---

<Layout
  title="Star Trek Series | Complete Guide to All Star Trek TV Shows"
  description="Explore all Star Trek series from The Original Series to Discovery, Picard and beyond. Get episode guides, character information, and timeline placement."
  schemaData={seriesListSchema}
>
  <!-- TEMP: ARIA live region for dynamic updates -->
  <div id="aria-live-region" aria-live="polite" class="sr-only" style="position:absolute;left:-9999px;top:auto;width:1px;height:1px;overflow:hidden;">
    Timeline updated.
  </div>
  <div class="container mx-auto px-4 py-12">
      <div class="debug-panel bg-space-black text-starfleet-gold p-4 mb-6 rounded-lg border border-starfleet-gold">
        <div><strong>DEBUG:</strong></div>
        <div>Slugs for all series cards: <span class="text-console-green">{initialSeries.map(s => s.slug || s.uid || s.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '')).join(", ")}</span></div>
      </div>
      <div class="lcars-header mb-8">
        <div class="lcars-header-content">
          <h1 class="text-3xl">Federation Database: Star Trek Series</h1>
        </div>
      </div>
      
      <div class="lcars-panel mb-12">
        <div class="lcars-top-bar flex">
          <div class="w-32 h-8 bg-starfleet-gold rounded-tl-lg"></div>
          <div class="flex-1 h-8 bg-starfleet-blue"></div>
          <div class="w-16 h-8 bg-starfleet-red"></div>
        </div>
        
        <div class="panel-content p-6 bg-space-black bg-opacity-90 border-x border-b border-starfleet-blue rounded-b-lg">
          <p class="text-gray-300 mb-6">
            Accessing Federation archives... Displaying all Star Trek television series spanning from the 1960s to today.
            Each series expands the rich tapestry of the Star Trek universe, introducing new characters,
            technologies, and interstellar civilizations.
          </p>
        
        <div class="filters mb-8">
          <div class="flex flex-wrap gap-6">
            <!-- Production Company Filter -->
            {productionCompanies.length > 0 && (
              <div class="filter-group">
                <h3 class="text-white text-lg mb-3 filter-label">Production Company</h3>
                <div class="relative filter-select-wrapper">
                  <select
                    id="company-filter"
                    class="appearance-none bg-space-black text-white p-3 pr-10 border-2 border-starfleet-blue rounded-lg relative min-w-[200px] shadow-lg filter-select"
                  >
                    <option value="all">All Companies</option>
                    {productionCompanies.map(company => (
                      <option value={company}>{company}</option>
                    ))}
                  </select>
                  <!-- Enhanced chevron with glow effect -->
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 filter-chevron">
                    <svg class="h-5 w-5 fill-starfleet-gold filter drop-shadow-lg"
                        viewBox="0 0 20 20"><path d="M5 7l5 5 5-5H5z"/></svg>
                  </div>
                </div>
              </div>
            )}
            
            <!-- Network Filter -->
            {networks.length > 0 && (
              <div class="filter-group">
                <h3 class="text-white text-lg mb-3 filter-label">Original Network</h3>
                <div class="relative filter-select-wrapper">
                  <select
                    id="network-filter"
                    class="appearance-none bg-space-black text-white p-3 pr-10 border-2 border-starfleet-blue rounded-lg relative min-w-[200px] shadow-lg filter-select"
                  >
                    <option value="all">All Networks</option>
                    {networks.map(network => (
                      <option value={network}>{network}</option>
                    ))}
                  </select>
                  <!-- Enhanced chevron with glow effect -->
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 filter-chevron">
                    <svg class="h-5 w-5 fill-starfleet-gold filter drop-shadow-lg"
                        viewBox="0 0 20 20"><path d="M5 7l5 5 5-5H5z"/></svg>
                  </div>
                </div>
              </div>
            )}
            
            <!-- Decade Filter -->
            {decades.length > 0 && (
              <div class="filter-group">
                <h3 class="text-white text-lg mb-3 filter-label">Decade</h3>
                <div class="relative filter-select-wrapper">
                  <select
                    id="decade-filter"
                    class="appearance-none bg-space-black text-white p-3 pr-10 border-2 border-starfleet-blue rounded-lg relative min-w-[150px] shadow-lg filter-select"
                  >
                    <option value="all">All Decades</option>
                    {decades.map(decade => (
                      <option value={decade}>{decade}s</option>
                    ))}
                  </select>
                  <!-- Enhanced chevron with glow effect -->
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 filter-chevron">
                    <svg class="h-5 w-5 fill-starfleet-gold filter drop-shadow-lg"
                        viewBox="0 0 20 20"><path d="M5 7l5 5 5-5H5z"/></svg>
                  </div>
                </div>
              </div>
            )}
            
            <!-- View Toggle -->
            <div class="filter-group ml-4">
              <h3 class="text-white text-lg mb-3 filter-label">Timeline View</h3>
              <div class="flex gap-4 view-toggle-container">
                <button id="view-chronology" class="trek-button active">In-Universe</button>
                <button id="view-release" class="trek-button">Release Order</button>
              </div>
            </div>
            
            <!-- Search -->
            <div class="filter-group ml-auto">
              <h3 class="text-white text-lg mb-3 filter-label">Search</h3>
              <div class="relative search-container">
                <input
                  type="text"
                  id="search-input"
                  placeholder="Search series..."
                  class="appearance-none bg-space-black border-2 border-starfleet-blue text-white p-3 pl-10 rounded-lg min-w-[250px] shadow-lg focus:border-starfleet-gold focus:outline-none transition-all duration-300"
                >
                <div class="absolute inset-y-0 left-0 flex items-center pl-3">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-starfleet-blue" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Series container with enhanced timeline style -->
    <div class="timeline-container" id="series-container" aria-label="Star Trek Series Timeline" role="list">
      <!-- Timeline legend -->
      <div class="timeline-legend">
        <div class="legend-item">
          <span class="legend-dot in-universe"></span>
          <span class="legend-text">In-Universe Timeline</span>
        </div>
        <div class="legend-item">
          <span class="legend-dot release-order"></span>
          <span class="legend-text">Release Timeline</span>
        </div>
      </div>
      <!-- Central timeline line is handled by CSS ::before -->

      {initialSeries.map((series, idx) => {
        // Determine left/right alignment
        const alignment = idx % 2 === 0 ? 'left' : 'right';
        // Use wikiImage, image, or fallback
        const imageUrl = series.wikiImage || series.image || '/images/stars-placeholder.jpg';
        // Slug for link
        const slug = series.slug || series.uid || series.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
        // Dates
        const stardate = series.stardate || '';
        const years = series.years || '';
        // Abbreviation
        const abbr = series.abbreviation || "ST";
        // Wiki summary
        const summary = series.wikiSummary ? series.wikiSummary.replace(/<[^>]*>/g, '').substring(0, 150) + '...' : (series.description || `Star Trek series that aired on ${series.originalNetwork || "television"}.`);
        // Memory Alpha link
        const wikiUrl = series.wikiUrl;
        // Seasons
        const seasons = series.seasons || series.seasonsCount || "?";
        // Primary/secondary date for badge
        const primaryDate = stardate || years || "Unknown";
        const secondaryDate = years || stardate || "Unknown";
        // Colors
        const primaryColor = 'starfleet-blue';
        const secondaryColor = 'console-green';

        return (
          <div class={`timeline-row ${alignment} relative`} key={series.uid || series.slug || idx} role="listitem" tabindex="-1">
            {/* Timeline node */}
            <div class="timeline-node absolute left-1/2 transform -translate-x-1/2" aria-hidden="true"></div>
            {/* Connector */}
            <div class={`connector absolute top-16 ${alignment === 'left' ? 'right-0' : 'left-0'} w-12 h-0.5 bg-starfleet-gold transform -translate-y-1/2`} aria-hidden="true"></div>
            {/* Card */}
            <a href={`/series/${slug}/`} class="series-card" aria-label={`View details for ${series.title}`} tabindex="0">
              <div class="lcars-card-header flex">
                <div class="w-16 h-8 bg-starfleet-gold rounded-tl-lg"></div>
                <div class="flex-1 h-8 bg-starfleet-blue flex items-center justify-center">
                  <span class="text-sm font-bold tracking-wider">{abbr}</span>
                </div>
              </div>
              <div class="card-body bg-space-black bg-opacity-90 p-4 border-x border-starfleet-blue">
                <div class="card-date-badge">{primaryDate}</div>
                <div class="relative aspect-video mb-4 overflow-hidden rounded-lg shadow-lg card-image-container">
                  <img
                    src={imageUrl}
                    alt={series.title}
                    class="w-full h-full object-cover card-image"
                    loading="lazy"
                    onerror="this.onerror=null; this.src='/images/stars-placeholder.jpg';"
                  />
                  <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-space-black to-transparent p-3">
                    <span class="text-console-green text-sm font-mono font-bold">{secondaryDate}</span>
                  </div>
                </div>
                <h2 class="text-xl text-white font-semibold mb-3 border-b border-starfleet-blue pb-2 card-title">{series.title}</h2>
                <div class="flex justify-between text-gray-300 text-sm mb-3 bg-space-deep p-2 rounded card-meta">
                  <span class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-console-green" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    {secondaryDate}
                  </span>
                  <span class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-console-green" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                    {seasons} seasons
                  </span>
                </div>
                <p class="text-gray-300 text-sm leading-relaxed card-description">{summary}</p>
                {wikiUrl && (
                  <div class="mt-4 pt-2 border-t border-gray-700 card-links">
                    <a href={wikiUrl} target="_blank" rel="noopener noreferrer" class="text-xs text-starfleet-gold hover:underline inline-flex items-center bg-space-deep px-2 py-1 rounded" onClick={e => e.stopPropagation()}>
                      Memory Alpha
                      <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-1">
                        <path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"></path>
                        <path d="M15 3h6v6"></path>
                        <path d="M10 14L21 3"></path>
                      </svg>
                    </a>
                  </div>
                )}
              </div>
              <div class="lcars-card-footer flex">
                <div class="w-10 h-8 bg-starfleet-red"></div>
                <div class="flex-1 h-8 bg-console-blue"></div>
                <div class="w-24 h-8 bg-starfleet-gold rounded-br-lg"></div>
              </div>
            </a>
          </div>
        );
      })}
    </div>
    
    <!-- Pagination controls -->
    <div class="flex justify-between items-center my-8">
      <div class="series-count px-4 py-2 bg-space-black rounded-full text-white text-sm border border-starfleet-blue shadow-glow" id="series-count">
        {totalSeries} series
      </div>
      
      <div id="pagination-controls" class="flex justify-center items-center">
        <div class="lcars-pagination flex items-center bg-space-black border border-starfleet-blue rounded-lg overflow-hidden shadow-glow">
          <button id="prev-page" class="px-4 py-2 bg-starfleet-blue text-white hover:bg-starfleet-gold hover:text-space-black transition-colors">
            <span class="hidden md:inline">Previous</span>
            <span class="md:hidden">Prev</span>
          </button>
          <div class="px-4 py-2 text-white">
            Page <span id="current-page-num">1</span> of <span id="total-pages">{totalPages}</span>
          </div>
          <button id="next-page" class="px-4 py-2 bg-starfleet-blue text-white hover:bg-starfleet-gold hover:text-space-black transition-colors">
            Next
          </button>
        </div>
      </div>
    </div>
    
    <!-- No results message (hidden by default) -->
    <div id="no-results" class="hidden text-center py-8">
      <div class="lcars-panel p-6 inline-block">
        <p class="text-console-blue text-xl">No series match your search criteria.</p>
        <p class="text-white mt-2">Please adjust your filters or try a different search term.</p>
      </div>
    </div>
  </div>
</Layout>

<script
  id="initial-payload"
  type="application/json"
  set:html={JSON.stringify({
    series: initialSeries,
    totalPages: totalPages,
    totalSeries: totalSeries,
    pageSize: PAGE_SIZE,
    productionCompanies: productionCompanies,
    networks: networks,
    decades: decades
  })}
/>

<script>
  // TEMP: Add focus outline to all focusable elements for accessibility testing
  document.addEventListener('DOMContentLoaded', () => {
    const style = document.createElement('style');
    style.innerHTML = `
      a:focus, button:focus, select:focus, input:focus, [tabindex]:focus {
        outline: 3px solid #FFD700 !important;
        outline-offset: 2px !important;
        z-index: 9999 !important;
      }
    `;
    document.head.appendChild(style);

    // TEMP: Log focus events for timeline cards and buttons
    document.body.addEventListener('focusin', (e) => {
      if (e.target.classList.contains('series-card') || e.target.tagName === 'BUTTON') {
        console.log('[ACCESSIBILITY] Focused:', e.target);
      }
    });

    // TEMP: Announce updates to ARIA live region after filtering/pagination
    const ariaLive = document.getElementById('aria-live-region');
    const announce = (msg) => {
      if (ariaLive) {
        ariaLive.textContent = msg;
        setTimeout(() => { ariaLive.textContent = ''; }, 1000);
      }
    };
    // Patch render to announce updates
    const origRender = window.render;
    window.render = function(...args) {
      if (typeof origRender === 'function') origRender.apply(this, args);
      announce('Timeline updated.');
    };
  });

  // Client-side STAPI client using the Netlify proxy
  const stapiClient = {
    PROXY_URL: '/api/series', // Use the proxy endpoint
    
    async getSeries(page = 0, pageSize = 12, filters = {}) {
      try {
        const params = new URLSearchParams({
          pageNumber: page.toString(),
          pageSize: pageSize.toString(),
        });
        
        // Add filter parameters
        for (const [key, value] of Object.entries(filters)) {
          if (value && value !== 'all') { // Only add active filters
            params.append(key, value);
          }
        }
        
        const url = `${this.PROXY_URL}?${params.toString()}`;
        console.log(`Fetching via proxy: ${url}`); // Log URL
        
        const response = await fetch(url); // Fetch from the proxy
        
        if (!response.ok) {
           const errorData = await response.json().catch(() => ({ error: 'Failed to parse error response' }));
           console.error(`Proxy fetch error! Status: ${response.status}`, errorData);
           throw new Error(`HTTP error! status: ${response.status}, details: ${errorData.error || response.statusText}`);
        }
        
        const data = await response.json();
        console.log(`Received page ${page} (filtered: ${JSON.stringify(filters)}):`, data); // Log received data
        return data; // Should contain { series: [], page: { totalPages, totalElements } }
      } catch (error) {
        console.error('Error fetching series via proxy:', error);
        // Return an empty structure on error to prevent crashes
        return { series: [], page: { totalPages: 1, totalElements: 0 } };
      }
    }
  };
  
  document.addEventListener('DOMContentLoaded', () => {
    const payload = JSON.parse(document.getElementById('initial-payload').textContent);
    const PAGE_SIZE = payload.pageSize;
    let currentPage = 1;
    let totalPages = payload.totalPages;
    let totalSeries = payload.totalSeries;
    let allSeries = [...payload.series]; // Always holds only the current page's series
    let isLoading = false; // Prevent multiple simultaneous fetches
    let currentFilters = {}; // Initialize current filters
    let viewMode = 'chronology'; // Default view mode
    
    // DOM Elements
    const companyFilter = document.getElementById('company-filter');
    const networkFilter = document.getElementById('network-filter');
    const decadeFilter = document.getElementById('decade-filter');
    const searchInput = document.getElementById('search-input');
    const chronologyBtn = document.getElementById('view-chronology');
    const releaseBtn = document.getElementById('view-release');
    const prevBtn = document.getElementById('prev-page');
    const nextBtn = document.getElementById('next-page');
    const pageNum = document.getElementById('current-page-num');
    const totalNum = document.getElementById('total-pages');
    const countBadge = document.getElementById('series-count');
    const container = document.getElementById('series-container');
    const noResults = document.getElementById('no-results');
    
    const debounce = (fn, ms = 300) => {
      let t;
      return (...args) => {
        clearTimeout(t);
        t = setTimeout(() => fn(...args), ms);
      };
    };
    
    // Function to get current filter values from UI elements
    function getCurrentFilters() {
      const filters = {};
      const companyVal = companyFilter?.value;
      const networkVal = networkFilter?.value;
      const decadeVal = decadeFilter?.value;
      const searchTerm = searchInput.value.trim();
      
      if (companyVal && companyVal !== 'all') filters.productionCompany = companyVal;
      if (networkVal && networkVal !== 'all') filters.originalNetwork = networkVal;
      if (decadeVal && decadeVal !== 'all') filters.decade = decadeVal;
      if (searchTerm) filters.title = searchTerm;
      
      return filters;
    }
    
    // Function to fetch a specific page *for the current filters* if not already loaded
    async function fetchPageIfNeeded(pageNumber) { // pageNumber is 1-based for UI
      if (isLoading) {
        return; // Prevent multiple simultaneous fetches
      }
      const pageIndex = pageNumber - 1; // API is 0-based
      
      isLoading = true;
      container.style.opacity = '0.5'; // Indicate loading
      
      try {
        // Fetch using current filters
        const data = await stapiClient.getSeries(pageIndex, PAGE_SIZE, currentFilters);
        allSeries = data.series || [];
        // Update totals if provided
        if (data.page?.totalPages && data.page.totalPages !== totalPages) {
          totalPages = data.page.totalPages;
        }
        if (data.page?.totalElements && data.page.totalElements !== totalSeries) {
          totalSeries = data.page.totalElements;
        }
      } catch (error) {
        console.error(`Failed to fetch page ${pageIndex} with filters:`, error);
        // Handle error display if needed
      } finally {
        isLoading = false;
        container.style.opacity = '1';
        render(); // Re-render with potentially new data or updated totals
      }
    }
    
    // Function to apply filters, fetch the first page, and update state
    async function applyFiltersAndFetch() {
      if (isLoading) return; // Don't apply if already loading
      
      currentPage = 1; // Reset to first page
      currentFilters = getCurrentFilters(); // Get latest filters from UI
      allSeries = []; // Clear existing series
      isLoading = true; // Set loading flag
      container.innerHTML = '<p class="text-center text-white col-span-full">Loading...</p>'; // Show loading message
      noResults.classList.add('hidden'); // Hide no results message
      countBadge.textContent = `Loading...`;
      pageNum.textContent = '1';
      totalNum.textContent = '?'; // Indicate total pages unknown
      prevBtn.disabled = true;
      nextBtn.disabled = true;
      
      try {
        const data = await stapiClient.getSeries(0, PAGE_SIZE, currentFilters); // Fetch page 0 (first page)
        allSeries = data.series || [];
        totalPages = data.page?.totalPages || 1;
        totalSeries = data.page?.totalElements || allSeries.length;
      } catch (error) {
        console.error("Error applying filters and fetching initial data:", error);
        allSeries = [];
        totalPages = 1;
        totalSeries = 0;
        // Optionally display an error message in the container
        container.innerHTML = '<p class="text-center text-red-500 col-span-full">Error loading series. Please try again.</p>';
      } finally {
        isLoading = false;
        render(); // Render the newly fetched data (or empty state/error)
      }
    }
    
    // Function to render the current page based only on the current page's data in `allSeries`
    function render() {
      try {
        console.log("Render called - current page:", currentPage, "total pages:", totalPages, "total series:", totalSeries);
        
        // Update total count display based on the overall total for the current filter set
        countBadge.textContent = `${totalSeries} series found`;
        
        // Update pagination display (uses overall totalPages for the current filter set)
        pageNum.textContent = currentPage;
        totalNum.textContent = totalPages; // Display the overall total pages
        
        // Enable/disable pagination buttons based on overall totalPages
        prevBtn.disabled = currentPage <= 1 || isLoading;
        nextBtn.disabled = currentPage >= totalPages || isLoading;
        
        // Display "No Results" message if totalSeries is 0 after fetch/filter
        noResults.classList.toggle('hidden', totalSeries > 0);
        container.classList.toggle('hidden', totalSeries === 0); // Hide grid if no results
        
        // Render series cards for the current page's items (allSeries is always current page)
        if (totalSeries > 0) {
          try {
            console.log("Rendering series:", allSeries.length);
            
            // Sort the series based on view mode
            const seriesToRender = [...allSeries];
            
            if (viewMode === 'chronology') {
              // Sort by in-universe chronology (stardate)
              seriesToRender.sort((a, b) => {
                const aYear = a.stardate ? parseInt(a.stardate.split('-')[0]) : 0;
                const bYear = b.stardate ? parseInt(b.stardate.split('-')[0]) : 0;
                return aYear - bYear;
              });
            } else {
              // Sort by release date
              seriesToRender.sort((a, b) => {
                const aYear = a.productionStartYear || 0;
                const bYear = b.productionStartYear || 0;
                return aYear - bYear;
              });
            }
            
            // Clear the container first
            container.innerHTML = '';
            
            // Create a document fragment to improve performance
            const fragment = document.createDocumentFragment();
            
            // Extract years for timeline markers
            const years = [];
            seriesToRender.forEach(series => {
              const year = viewMode === 'chronology'
                ? (series.stardate ? parseInt(series.stardate.split('-')[0]) : 0)
                : (series.productionStartYear || 0);
              
              if (year > 0 && !years.includes(year)) {
                years.push(year);
              }
            });
            
            // Sort years and add markers (limit to avoid overcrowding)
            years.sort((a, b) => a - b);
            const yearStep = years.length > 8 ? Math.ceil(years.length / 8) : 1;
            const filteredYears = years.filter((_, index) => index % yearStep === 0);
            
            // Add year markers to the timeline
            filteredYears.forEach(year => {
              const yearMarker = document.createElement('div');
              yearMarker.className = 'year-marker';
              yearMarker.textContent = viewMode === 'chronology' ? `${year}` : `${year}`;
              
              // Calculate position based on the range of years
              const minYear = Math.min(...years);
              const maxYear = Math.max(...years);
              const range = maxYear - minYear;
              const position = range > 0
                ? ((year - minYear) / range) * 80 + 10 // 10-90% of container height
                : 50; // Default to middle if all same year
              
              yearMarker.style.top = `${position}%`;
              fragment.appendChild(yearMarker);
            });
            
            // Create and append each series card
            // Alternate left/right columns for timeline layout
            seriesToRender.forEach((series, idx) => {
              if (!series || !series.title) {
                console.error("Invalid series data:", series);
                return; // Skip invalid series
              }

              const alignment = idx % 2 === 0 ? 'left' : 'right';
              const imageUrl = series.wikiImage || series.image || '/images/stars-placeholder.jpg';
              const slug = series.slug || series.uid || series.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
              const primaryDate = viewMode === 'chronology' ? series.stardate : series.years;
              const secondaryDate = viewMode === 'chronology' ? series.years : series.stardate;
              const primaryColor = viewMode === 'chronology' ? 'starfleet-blue' : 'starfleet-red';
              const secondaryColor = viewMode === 'chronology' ? 'console-green' : 'console-blue';

              // Create the timeline row container
              const row = document.createElement('div');
              row.className = `timeline-row ${alignment} relative`;

              // Timeline node
              const node = document.createElement('div');
              node.className = 'timeline-node absolute left-1/2 transform -translate-x-1/2';
              node.setAttribute('aria-hidden', 'true');
              row.appendChild(node);

              // Connector
              const connector = document.createElement('div');
              connector.className = `connector absolute top-16 ${alignment === 'left' ? 'right-0' : 'left-0'} w-12 h-0.5 bg-starfleet-gold transform -translate-y-1/2`;
              connector.setAttribute('aria-hidden', 'true');
              row.appendChild(connector);

              // Card
              const card = document.createElement('a');
              card.href = `/series/${slug}/`;
              card.className = 'series-card';
              card.innerHTML = `
                <div class="lcars-card-header flex">
                  <div class="w-16 h-8 bg-starfleet-gold rounded-tl-lg"></div>
                  <div class="flex-1 h-8 bg-${primaryColor} flex items-center justify-center">
                    <span class="text-sm font-bold tracking-wider">${series.abbreviation || "ST"}</span>
                  </div>
                </div>
                <div class="card-body bg-space-black bg-opacity-90 p-4 border-x border-${primaryColor}">
                  <div class="card-date-badge">${primaryDate || "Unknown"}</div>
                  <div class="relative aspect-video mb-4 overflow-hidden rounded-lg shadow-lg card-image-container">
                    <img
                      src="${imageUrl}"
                      alt="${series.title}"
                      class="w-full h-full object-cover card-image"
                      loading="lazy"
                      onerror="this.onerror=null; this.src='/images/stars-placeholder.jpg';"
                    />
                    <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-space-black to-transparent p-3">
                      <span class="text-${secondaryColor} text-sm font-mono font-bold">${secondaryDate || "Unknown"}</span>
                    </div>
                  </div>
                  <h2 class="text-xl text-white font-semibold mb-3 border-b border-${primaryColor} pb-2 card-title">${series.title}</h2>
                  <div class="flex justify-between text-gray-300 text-sm mb-3 bg-space-deep p-2 rounded card-meta">
                    <span class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-${secondaryColor}" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      ${secondaryDate || "Unknown"}
                    </span>
                    <span class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-${secondaryColor}" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                      </svg>
                      ${series.seasons || series.seasonsCount || "?"} seasons
                    </span>
                  </div>
                  <p class="text-gray-300 text-sm leading-relaxed card-description">${series.wikiSummary ? series.wikiSummary.replace(/<[^>]*>/g, '').substring(0, 150) + '...' : (series.description || `Star Trek series that aired on ${series.originalNetwork || "television"}.`)}</p>
                  ${series.wikiUrl ? `
                    <div class="mt-4 pt-2 border-t border-gray-700 card-links">
                      <a href="${series.wikiUrl}" target="_blank" rel="noopener noreferrer" class="text-xs text-starfleet-gold hover:underline inline-flex items-center bg-space-deep px-2 py-1 rounded" onclick="event.stopPropagation()">
                        Memory Alpha
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-1">
                          <path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"></path>
                          <path d="M15 3h6v6"></path>
                          <path d="M10 14L21 3"></path>
                        </svg>
                      </a>
                    </div>
                  ` : ''}
                </div>
                <div class="lcars-card-footer flex">
                  <div class="w-10 h-8 bg-starfleet-${viewMode === 'chronology' ? 'red' : 'blue'}"></div>
                  <div class="flex-1 h-8 bg-console-blue"></div>
                  <div class="w-24 h-8 bg-starfleet-gold rounded-br-lg"></div>
                </div>
              `;

              // Add a data attribute for the year to help with timeline visualization
              const year = viewMode === 'chronology'
                ? (series.stardate ? parseInt(series.stardate.split('-')[0]) : 0)
                : (series.productionStartYear || 0);
              card.dataset.year = year;

              // Append the card to the timeline row
              row.appendChild(card);

              // Append the row to the fragment
              fragment.appendChild(row);
            });
            
            // Append all cards to the container at once
            container.appendChild(fragment);
            
            // Add a clearfix element to ensure the container expands to contain all floating elements
            const clearfix = document.createElement('div');
            clearfix.style.clear = 'both';
            container.appendChild(clearfix);
          } catch (error) {
            console.error("Error in render function:", error);
            container.innerHTML = '<p class="text-center text-red-500 col-span-full">Error rendering series. Please check the console for details.</p>';
          }
        } else if (!isLoading) {
          // Ensure loading message is removed if there are truly no results
          container.innerHTML = '';
        }
      } catch (error) {
        console.error("Error in main render function:", error);
        container.innerHTML = '<p class="text-center text-red-500 col-span-full">Error rendering page. Please check the console for details.</p>';
      }
    }
    
    // Debounced version of applying filters for search input
    const debouncedApplyFilters = debounce(applyFiltersAndFetch, 500);
    
    // Event Listeners - Trigger filter application
    companyFilter?.addEventListener('change', applyFiltersAndFetch);
    networkFilter?.addEventListener('change', applyFiltersAndFetch);
    decadeFilter?.addEventListener('change', applyFiltersAndFetch);
    searchInput.addEventListener('input', debouncedApplyFilters); // Use debounced version for search
    
    // View toggle
    chronologyBtn.addEventListener('click', () => {
      viewMode = 'chronology';
      chronologyBtn.classList.add('active');
      releaseBtn.classList.remove('active');
      render(); // Re-render with new view mode
    });
    
    releaseBtn.addEventListener('click', () => {
      viewMode = 'release';
      releaseBtn.classList.add('active');
      chronologyBtn.classList.remove('active');
      render(); // Re-render with new view mode
    });
    
    prevBtn.addEventListener('click', async () => {
      if (currentPage > 1 && !isLoading) {
        const prevPageNum = currentPage - 1;
        // Fetch the previous page data before decrementing currentPage
        await fetchPageIfNeeded(prevPageNum);
        // Only decrement if fetch didn't fail
        currentPage--;
        render();
      }
    });
    
    nextBtn.addEventListener('click', async () => {
       if (currentPage < totalPages && !isLoading) {
           const nextPageNum = currentPage + 1;
           // Fetch if needed *before* incrementing currentPage visually
           await fetchPageIfNeeded(nextPageNum);
           // Only increment if fetch didn't fail catastrophically and page exists
           if (currentPage < totalPages) { // Check totalPages again in case fetch failed
               currentPage++;
               render(); // Render the new page slice
           }
       }
    });
    
    // Initial Render on Load
    render(); // Render the initial data passed from the server
  });
</script>

<style>
  /* TEMP: Force mobile layout for responsive testing */
  @media (max-width: 6000px) {
    .timeline-container, .timeline-row, .series-card {
      max-width: 100vw !important;
      width: 100% !important;
      float: none !important;
      display: block !important;
      margin: 0 auto !important;
    }
  }
  /* Filter and Button Styles */
  .trek-button {
    background-color: var(--space-black);
    color: var(--starfleet-gold);
    border: 1px solid var(--starfleet-blue);
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }
  
  .trek-button:hover {
    background-color: var(--starfleet-blue);
    color: white;
    transform: translateY(-2px);
  }
  
  .trek-button.active {
    background-color: var(--console-blue);
    box-shadow: 0 0 15px var(--console-blue);
  }

  .trek-button::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: var(--starfleet-gold);
    transform: scaleX(0);
    transform-origin: right;
    transition: transform 0.3s ease;
  }

  .trek-button:hover::after {
    transform: scaleX(1);
    transform-origin: left;
  }
  
  /* Enhanced Filter Styles */
  .filter-group {
    position: relative;
  }

  .filter-group select {
    cursor: pointer;
    transition: all 0.3s ease;
    border-width: 2px;
  }

  .filter-group select:hover {
    border-color: var(--starfleet-gold);
    box-shadow: 0 0 10px rgba(0, 178, 255, 0.3);
  }

  .filter-group select:focus {
    outline: none;
    border-color: var(--starfleet-gold);
    box-shadow: 0 0 15px rgba(0, 178, 255, 0.5);
  }

  .filter-group h3 {
    position: relative;
    display: inline-block;
  }

  .filter-group h3::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background: var(--starfleet-blue);
  }
  
  /* Timeline container with enhanced styling */
  .timeline-container {
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 0;
  }
  
  /* Timeline legend */
  .timeline-legend {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 2rem;
    background: rgba(3, 10, 23, 0.7);
    padding: 0.75rem;
    border-radius: 8px;
    border: 1px solid var(--starfleet-blue);
    z-index: 5;
    position: relative;
  }
  
  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .legend-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
  }
  
  .legend-dot.in-universe {
    background-color: var(--starfleet-blue);
    box-shadow: 0 0 8px var(--starfleet-blue);
  }
  
  .legend-dot.release-order {
    background-color: var(--starfleet-red);
    box-shadow: 0 0 8px var(--starfleet-red);
  }
  
  .legend-text {
    color: white;
    font-size: 0.875rem;
  }
  
  /* Enhanced timeline vertical line */
  .timeline-container::before {
    content: '';
    position: absolute;
    width: 6px;
    background: linear-gradient(to bottom, var(--starfleet-blue), var(--console-blue));
    top: 0;
    bottom: 0;
    left: 50%;
    margin-left: -3px;
    border-radius: 3px;
    box-shadow: 0 0 15px var(--starfleet-blue);
    z-index: 0;
  }

  /* Year markers on timeline */
  .timeline-container .year-marker {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    background: var(--space-black);
    color: var(--starfleet-gold);
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: bold;
    border: 2px solid var(--starfleet-gold);
    box-shadow: 0 0 10px var(--starfleet-gold);
    z-index: 2;
    white-space: nowrap;
  }
  
  /* Improved series card styles */
  .series-card {
    position: relative;
    width: calc(50% - 60px);
    margin-bottom: 40px;
    transition: all 0.3s cubic-bezier(0.17, 0.67, 0.3, 0.96);
    overflow: hidden;
    display: block;
    background-color: rgba(3, 10, 23, 0.85);
    border: 2px solid var(--starfleet-blue);
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  }
  
  /* Card date badge */
  .card-date-badge {
    position: absolute;
    top: 12px;
    right: 12px;
    background: var(--space-black);
    color: var(--starfleet-gold);
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: bold;
    border: 1px solid var(--starfleet-gold);
    box-shadow: 0 0 8px rgba(255, 204, 0, 0.5);
    z-index: 10;
  }
  
  /* Card image container */
  .card-image-container {
    position: relative;
    border: 1px solid var(--starfleet-blue);
    box-shadow: 0 0 15px rgba(0, 178, 255, 0.3);
    transition: all 0.3s ease;
  }
  
  .card-image {
    transition: transform 0.5s ease;
  }
  
  /* Card title */
  .card-title {
    position: relative;
    padding-bottom: 0.75rem;
    margin-bottom: 1rem;
  }
  
  .card-title::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, var(--starfleet-blue), transparent);
  }
  
  /* Card meta info */
  .card-meta {
    background: rgba(1, 10, 31, 0.7);
    border: 1px solid rgba(0, 178, 255, 0.2);
  }
  
  /* Card description */
  .card-description {
    line-height: 1.5;
    color: rgba(255, 255, 255, 0.8);
  }
  
  /* Left side cards */
  .series-card:nth-child(odd) {
    left: 0;
    float: left;
    clear: both;
  }
  
  /* Right side cards */
  .series-card:nth-child(even) {
    right: 0;
    float: right;
    clear: both;
  }
  
  /* Timeline dots with pulsing animation */
  .series-card::after {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    right: -70px;
    top: 30px;
    border-radius: 50%;
    z-index: 1;
    background: var(--starfleet-gold);
    box-shadow: 0 0 10px var(--starfleet-gold);
    animation: pulse 2s infinite;
  }
  
  /* Right side dots */
  .series-card:nth-child(even)::after {
    left: -70px;
    right: auto;
  }

  /* Connecting lines to timeline */
  .series-card::before {
    content: '';
    position: absolute;
    top: 40px;
    width: 50px;
    height: 3px;
    background: var(--starfleet-gold);
    z-index: 1;
    box-shadow: 0 0 8px var(--starfleet-gold);
  }

  /* Left side connecting lines */
  .series-card:nth-child(odd)::before {
    right: -50px;
  }

  /* Right side connecting lines */
  .series-card:nth-child(even)::before {
    left: -50px;
  }
  
  /* Enhanced hover effects */
  .series-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 10px 25px rgba(0, 178, 255, 0.5);
    border-color: var(--starfleet-gold);
  }
  
  .series-card:hover img {
    transform: scale(1.05);
    transition: transform 0.5s ease;
  }
  
  .series-card:hover .card-image-container {
    box-shadow: 0 0 20px rgba(0, 178, 255, 0.5);
  }
  
  .series-card:hover .card-date-badge {
    background-color: var(--starfleet-gold);
    color: var(--space-black);
    box-shadow: 0 0 12px rgba(255, 204, 0, 0.7);
  }

  /* Pulsing animation for timeline dots */
  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(255, 204, 0, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(255, 204, 0, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(255, 204, 0, 0);
    }
  }
  
  /* Panel styling */
  .lcars-panel {
    background-color: rgba(3, 10, 23, 0.7);
    border: none;
    border-radius: 0;
    overflow: hidden;
    padding: 0;
  }
  
  .card-body {
    transition: all 0.3s ease;
    padding: 1rem;
  }
  
  img {
    transition: transform 0.5s ease;
  }
  
  /* Enhanced pagination styles */
  .lcars-pagination {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(0, 178, 255, 0.2);
  }
  
  /* Shadow glow effect */
  .shadow-glow {
    box-shadow: 0 0 15px rgba(0, 178, 255, 0.3);
    transition: box-shadow 0.3s ease;
  }
  
  .shadow-glow:hover {
    box-shadow: 0 0 20px rgba(0, 178, 255, 0.5);
  }
  
  .lcars-pagination button {
    position: relative;
    z-index: 2;
    transition: all 0.2s ease;
    font-weight: bold;
    min-width: 100px;
  }
  
  .lcars-pagination button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .lcars-pagination button:not(:disabled):hover {
    background-color: var(--starfleet-gold);
    color: var(--space-black);
  }
  
  .lcars-pagination::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 50%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 204, 0, 0.1), transparent);
    animation: sweep 2s infinite;
    z-index: 1;
  }
  
  @keyframes sweep {
    0% { left: -100%; }
    100% { left: 100%; }
  }
  
  /* Clear floats after timeline */
  .timeline-container::after {
    content: "";
    display: table;
    clear: both;
  }
  
  /* Enhanced filter styles */
  .filter-label {
    position: relative;
    display: inline-block;
    margin-bottom: 0.75rem;
  }
  
  .filter-label::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, var(--starfleet-blue), transparent);
  }
  
  .filter-select-wrapper {
    position: relative;
    transition: all 0.3s ease;
  }
  
  .filter-select {
    transition: all 0.3s ease;
  }
  
  .filter-select:focus + .filter-chevron svg {
    fill: var(--console-blue);
    filter: drop-shadow(0 0 5px var(--console-blue));
  }
  
  .view-toggle-container {
    display: flex;
    gap: 0.5rem;
  }
  
  .search-container {
    position: relative;
  }
  
  .search-container input:focus + div svg {
    color: var(--starfleet-gold);
  }
  
  /* Enhanced responsive timeline */
  @media screen and (max-width: 992px) {
    .series-card {
      width: calc(50% - 40px);
    }
    
    .series-card::after {
      width: 15px;
      height: 15px;
      right: -55px;
    }
    
    .series-card:nth-child(even)::after {
      left: -55px;
    }
    
    .series-card::before {
      width: 40px;
    }
    
    .series-card:nth-child(odd)::before {
      right: -40px;
    }
    
    .series-card:nth-child(even)::before {
      left: -40px;
    }
    
    .timeline-legend {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: center;
    }
  }
  
  @media screen and (max-width: 768px) {
    /* Place the timeline to the left */
    .timeline-container::before {
      left: 31px;
    }
    
    /* Full-width cards */
    .series-card {
      width: calc(100% - 80px);
      float: right;
      margin-left: 80px;
    }
    
    /* Make all cards stack on top of each other */
    .series-card:nth-child(odd),
    .series-card:nth-child(even) {
      left: 0;
      right: auto;
      float: right;
      clear: both;
    }
    
    /* Make all dots align to the left */
    .series-card::after,
    .series-card:nth-child(even)::after {
      left: -45px;
      right: auto;
    }
    
    /* Adjust connecting lines for mobile */
    .series-card::before,
    .series-card:nth-child(odd)::before,
    .series-card:nth-child(even)::before {
      left: -35px;
      width: 35px;
    }
    
    /* Adjust filters for mobile */
    .filters .flex {
      flex-direction: column;
      gap: 1rem;
    }
    
    .filter-group {
      width: 100%;
    }
    
    /* Year markers positioning for mobile */
    .timeline-container .year-marker {
      left: 31px;
      transform: translateX(-50%);
      font-size: 0.7rem;
      padding: 4px 8px;
    }
    
    .timeline-legend {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
      margin-left: 60px;
      margin-bottom: 1.5rem;
    }
  }
  
  @media screen and (max-width: 480px) {
    .series-card {
      margin-left: 60px;
      width: calc(100% - 60px);
    }
    
    .lcars-pagination button {
      min-width: 80px;
      padding: 0.5rem;
      font-size: 0.9rem;
    }
    
    .card-date-badge {
      top: 8px;
      right: 8px;
      font-size: 0.7rem;
      padding: 3px 6px;
    }
    
    .card-title {
      font-size: 1.1rem;
    }
    
    .card-meta {
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;
    }
  }
</style>
