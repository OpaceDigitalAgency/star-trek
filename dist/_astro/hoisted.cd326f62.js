import"./hoisted.86f38cc5.js";document.addEventListener("DOMContentLoaded",()=>{const d=document.getElementById("species-filter"),o=document.getElementById("rank-filter"),l=document.getElementById("search-input");document.getElementById("characters-container");const u=document.getElementById("no-results"),i=()=>{const t=d.value,s=o?.value,c=l.value.toLowerCase(),n=document.querySelectorAll(".species-section");let e=0;n.forEach(a=>{const v=a.getAttribute("data-species"),f=t==="all"||t===v,g=a.querySelectorAll(".character-card");let h=0;g.forEach(r=>{const E=r.getAttribute("data-rank"),L=r.querySelector("h3").textContent.toLowerCase(),S=!s||s==="all"||E===s,p=!c||L.includes(c);S&&p?(r.classList.remove("hidden"),h++,e++):r.classList.add("hidden")}),f&&h>0?a.classList.remove("hidden"):a.classList.add("hidden")}),e===0?u.classList.remove("hidden"):u.classList.add("hidden")};d.addEventListener("change",i),o&&o.addEventListener("change",i),l.addEventListener("input",i);const m=()=>{const t=new IntersectionObserver((s,c)=>{s.forEach(n=>{if(n.isIntersecting){const e=n.target;e.dataset.src&&(e.src=e.dataset.src,e.removeAttribute("data-src")),c.unobserve(e)}})});document.querySelectorAll("img[data-src]").forEach(s=>{t.observe(s)})};"IntersectionObserver"in window?m():document.querySelectorAll("img[data-src]").forEach(t=>{t.src=t.dataset.src})});
